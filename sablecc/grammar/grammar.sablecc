Package postfix; 

Helpers
    //Do not put Tokens/terminals in here
    number = ['0' .. '9']+;
    all = [00 .. 127];
    
    // different ways of producing end of line on different OS'
    cr = 13;
    lf = 10;
    tab = 9;
    eol = cr | lf | cr lf ;
    not_eol = [all -[cr + lf]];
    sign = '+' | '-';

Tokens
    //for tokens in the program
    newline = eol;

    //comment
    comment = ('#' not_eol* eol); 
    //braces and parens
    l_par = '(';
    r_par = ')';
    l_cbrack = '{';
    r_cbrack = '}';
    l_brack = '[';
    r_brack = ']';

    //types
    string = ('"' '"');
    intnum = sign? (number)+ ;
    floatnum = sign? (number)+ '.' (number)+;
    bool = 'true' | 'false';
    type = ('int' | 'bool' | 'float' | 'string' | 'csv' | 'char' | 'array');
    char = 39 '.' 39;

    id = (['A' .. 'Z'] ['a' .. 'z'])(['A' .. 'Z'] ['a' .. 'z'] ['0' .. '9'])*;
    blank = (' ' | 13 | 10)+;

    //Operators
    op_assign = ':=';
    op_plus = '+';
    op_minus = '-';
    op_mult = '*';
    op_div = '/';
    op_mod = '%';

    //Boolean Operators
    bop_lthan = '<';
    bop_lethan = '<=';
    bop_gthan = '>';
    bop_gethan = '>=';
    bop_eq = '==';
    bop_and = 'and';
    bop_or = 'or';
    bop_not = 'not';

    //Special Operators
    sop_dot = '.';
    sop_comma = ',';
    sop_sum = 'sum';
    sop_filter = 'filter';
    sop_groupby = 'groupby';
    sop_mean = 'mean';
    sop_sort = 'sort';
    sop_count = 'count';

    //Keywords
    kw_as = 'as';
    kw_import = 'import';
    kw_export = 'export';
    kw_print = 'print';
    kw_separated_by = 'seperated_by';
    kw_for = 'for';
    kw_while = 'while';
    kw_in = 'in';
    kw_if = 'if';
    kw_else = 'else';
    kw_sort_order_asc = 'asc';
    kw_sort_order_dsc = 'desc';
    kw_to = 'to';

    //array Keywords
    kw_add = 'add';
    kw_remove = 'remove';
    kw_remove_at = 'remove_at';
    kw_insert = 'insert';


Ignored Tokens
    blank,
    comment;

Productions
    program =
        {program} stmts;
        
    stmts =
        {statements} stmt newline stmts | ;

    stmt =
        {import_stmt} import |
        {declaration} type id op_assign expr | 
        {assignment_statement} assignment |
        {array_operations} array_op |
        {for_loop} kw_for id kw_in val block |
        {while_loop} kw_while expr block |
        {control_statement} kw_if expr block in_control_stmt | 
        {print_statement} kw_print expr | 
        {export_statement} kw_export id kw_to expr ;

    block =
       {block_stmt} l_cbrack stmts r_cbrack ;

    in_control_stmt =
       {elif_statement} kw_else kw_if expr block |
       {else_statement} else_statement;
    
    else_statement =
       {else_block_statement} kw_else block | ;
    
    assignment =
        {assign} id op_assign expr;

    expr =
       {expr_val_prime} bop_not? val expr_prime | 
       {expr_special} special_expr id;
    
    expr_prime = 
       {expr_prime_operator_val_prime} bin_infix_op val expr_prime | ;
    

    //index indmad Ã¦ndret fra val til expr
    indexing =
        {indexing} l_cbrack expr r_cbrack indexing | ;

    array_expr = 
        {array_expr_val_prime} l_brack val array_expr_prime r_brack ;

    array_expr_prime = 
        {array_expr_prime_extra} sop_comma val array_expr_prime | ;

    array_op =
        {array_operation_add} array_add |
        {array_operation_remove} array_remove |
        {array_operation_remove_at} array_remove_at |
        {array_operation_insert} array_insert ;

    array_add = 
        {add_to_array} kw_add l_par array_expr r_par ;

    array_remove = 
        {remove_from_array} kw_remove kw_in id;

    array_remove_at = 
        {remove_at_from_array} kw_remove_at indexing kw_in id;
        
    array_insert = 
        {insert_to_array} kw_insert val array_expr kw_in id;



    val = 
        {val_id} id |
        {val_floatnum} floatnum |
        {val_intnum} intnum |
        {val_string} string |
        {val_bool} bool ;

    bin_infix_op = 
        {plus_infix} op_plus |
        {minus_infix} op_minus |
        {multiplication_infix} op_mult |
        {division_infix} op_div |
        {modulo_infix} op_mod |
        {and_infix} bop_and |
        {or_infix} bop_or |
        {equality_infix} bop_eq |
        {greater_than_infix} bop_gthan |
        {greater_than_equal_infix} bop_gethan |
        {less_than_infix} bop_lthan |
        {less_than_equal_infix} bop_lethan ;
    
    special_expr =
        {speical_expression} special_syntax special_expr_prime;

    special_expr_prime =
        {special_expr_prime} special_syntax special_expr_prime | ;
    
    special_syntax =
        {sum_op} sop_sum |
        {filter_op} sop_filter  |
        {groupby_op} sop_groupby |
        {mean_op} sop_mean |
        {count_op} sop_count |
        {sort_op} sop_sort ;

    sum =
        {sum} sop_sum ;
    
    filter =
        {filter} sop_filter l_par expr r_par ;
    
    groupby = 
        {groupby} sop_groupby l_par expr r_par ;
    
    mean =
        {mean} sop_mean l_par expr r_par ;

    count =
        {count} sop_count l_par expr r_par ;

    sort =
        {sort_asc} sop_sort kw_sort_order_asc |
        {sort_desc} sop_sort kw_sort_order_dsc |
        {sort} sop_sort ;

    import =
        {import_without_seperator} kw_import string kw_as id |
        {import_with_seperator} kw_import string kw_separated_by char kw_as id;