/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.parser;

import postfix.lexer.*;
import postfix.node.*;
import postfix.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AStatementsStmts */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AStmts */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AImportStmtStmt */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ADeclarationStmt */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAssignmentStatementStmt */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AArrayOperationsStmt */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AForLoopStmt */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AWhileLoopStmt */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AControlStatementStmt */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce APrintStatementStmt */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce ACsvOperationStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AExportStatementStmt */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AReturnStatementStmt */
            {
                ArrayList<Object> list = new13();
                push(goTo(2), list, false);
            }
            break;
            case 14: /* reduce ABreakStatementStmt */
            {
                ArrayList<Object> list = new14();
                push(goTo(2), list, false);
            }
            break;
            case 15: /* reduce AVariableDeclarationInitializationDcl */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce AVariableDeclarationDcl */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list, false);
            }
            break;
            case 17: /* reduce AConstDeclarationInitializationDcl */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list, false);
            }
            break;
            case 18: /* reduce AFunctionDeclarationDcl */
            {
                ArrayList<Object> list = new18();
                push(goTo(3), list, false);
            }
            break;
            case 19: /* reduce AFunctionParamFunctionParam */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list, false);
            }
            break;
            case 20: /* reduce AFunctionParam */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list, false);
            }
            break;
            case 21: /* reduce AFunctionParamPrimeFunctionParamPrime */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AFunctionParamPrime */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce AFunctionBodyFunctionBody */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list, false);
            }
            break;
            case 24: /* reduce AReturnReturn */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce AFunctionCallParamFunctionCallParam */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AFunctionCallParam */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AFunctionCallParamPrimeFunctionCallParamPrime */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce AFunctionCallParamPrime */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce AFunctionCallFunctionCall */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list, false);
            }
            break;
            case 30: /* reduce ABlockStmtBlock */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AElifStatementInControlStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list, false);
            }
            break;
            case 32: /* reduce AElseStatementInControlStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce AElseBlockStatementElseStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce AElseStatement */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list, false);
            }
            break;
            case 35: /* reduce AAssignAssignment */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AAexprvalprimeexpr1Expr */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AAexprvalprimeexpr2Expr */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AExprSpecialExpr */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce AExprArrayExpr */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce AExprPrimeOperatorValPrimeExprPrime */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce AExprPrime */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce ACsvOperationAddCsvOp */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce ACsvOperationRemoveCsvOp */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce ACsvOperationRemoveAtCsvOp */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce ACsvOperationInsertCsvOp */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
            case 46: /* reduce AAddToCsvCsvAdd */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce ARemoveFromCsvCsvRemove */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list, false);
            }
            break;
            case 48: /* reduce ARemoveAtFromCsvCsvRemoveAt */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce AInsertFromCsvCsvInsert */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list, false);
            }
            break;
            case 50: /* reduce ACsvOrientationRowOrientation */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list, false);
            }
            break;
            case 51: /* reduce ACsvOrientationColumnOrientation */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list, false);
            }
            break;
            case 52: /* reduce AIndexingIndexing */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list, false);
            }
            break;
            case 53: /* reduce AIndexing */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list, false);
            }
            break;
            case 54: /* reduce AArrayExprValPrimeArrayExpr */
            {
                ArrayList<Object> list = new54();
                push(goTo(24), list, false);
            }
            break;
            case 55: /* reduce AArrayExprPrimeExtraArrayExprPrime */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list, false);
            }
            break;
            case 56: /* reduce AArrayExprPrime */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list, false);
            }
            break;
            case 57: /* reduce AArrayOperationAddArrayOp */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list, false);
            }
            break;
            case 58: /* reduce AArrayOperationRemoveArrayOp */
            {
                ArrayList<Object> list = new58();
                push(goTo(26), list, false);
            }
            break;
            case 59: /* reduce AArrayOperationRemoveAtArrayOp */
            {
                ArrayList<Object> list = new59();
                push(goTo(26), list, false);
            }
            break;
            case 60: /* reduce AArrayOperationInsertArrayOp */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list, false);
            }
            break;
            case 61: /* reduce AAddToArrayArrayAdd */
            {
                ArrayList<Object> list = new61();
                push(goTo(27), list, false);
            }
            break;
            case 62: /* reduce ARemoveFromArrayArrayRemove */
            {
                ArrayList<Object> list = new62();
                push(goTo(28), list, false);
            }
            break;
            case 63: /* reduce ARemoveAtFromArrayArrayRemoveAt */
            {
                ArrayList<Object> list = new63();
                push(goTo(29), list, false);
            }
            break;
            case 64: /* reduce AInsertToArrayArrayInsert */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list, false);
            }
            break;
            case 65: /* reduce AValIdVal */
            {
                ArrayList<Object> list = new65();
                push(goTo(31), list, false);
            }
            break;
            case 66: /* reduce AFunctionCallValueVal */
            {
                ArrayList<Object> list = new66();
                push(goTo(31), list, false);
            }
            break;
            case 67: /* reduce AValFloatnumVal */
            {
                ArrayList<Object> list = new67();
                push(goTo(31), list, false);
            }
            break;
            case 68: /* reduce AValIntnumVal */
            {
                ArrayList<Object> list = new68();
                push(goTo(31), list, false);
            }
            break;
            case 69: /* reduce AValStringVal */
            {
                ArrayList<Object> list = new69();
                push(goTo(31), list, false);
            }
            break;
            case 70: /* reduce AValBoolVal */
            {
                ArrayList<Object> list = new70();
                push(goTo(31), list, false);
            }
            break;
            case 71: /* reduce APlusInfixBinInfixOp */
            {
                ArrayList<Object> list = new71();
                push(goTo(32), list, false);
            }
            break;
            case 72: /* reduce AMinusInfixBinInfixOp */
            {
                ArrayList<Object> list = new72();
                push(goTo(32), list, false);
            }
            break;
            case 73: /* reduce AMultiplicationInfixBinInfixOp */
            {
                ArrayList<Object> list = new73();
                push(goTo(32), list, false);
            }
            break;
            case 74: /* reduce ADivisionInfixBinInfixOp */
            {
                ArrayList<Object> list = new74();
                push(goTo(32), list, false);
            }
            break;
            case 75: /* reduce AModuloInfixBinInfixOp */
            {
                ArrayList<Object> list = new75();
                push(goTo(32), list, false);
            }
            break;
            case 76: /* reduce AAndInfixBinInfixOp */
            {
                ArrayList<Object> list = new76();
                push(goTo(32), list, false);
            }
            break;
            case 77: /* reduce AOrInfixBinInfixOp */
            {
                ArrayList<Object> list = new77();
                push(goTo(32), list, false);
            }
            break;
            case 78: /* reduce AEqualityInfixBinInfixOp */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list, false);
            }
            break;
            case 79: /* reduce AGreaterThanInfixBinInfixOp */
            {
                ArrayList<Object> list = new79();
                push(goTo(32), list, false);
            }
            break;
            case 80: /* reduce AGreaterThanEqualInfixBinInfixOp */
            {
                ArrayList<Object> list = new80();
                push(goTo(32), list, false);
            }
            break;
            case 81: /* reduce ALessThanInfixBinInfixOp */
            {
                ArrayList<Object> list = new81();
                push(goTo(32), list, false);
            }
            break;
            case 82: /* reduce ALessThanEqualInfixBinInfixOp */
            {
                ArrayList<Object> list = new82();
                push(goTo(32), list, false);
            }
            break;
            case 83: /* reduce ANotEqualInfixBinInfixOp */
            {
                ArrayList<Object> list = new83();
                push(goTo(32), list, false);
            }
            break;
            case 84: /* reduce ASpeicalExpressionSpecialExpr */
            {
                ArrayList<Object> list = new84();
                push(goTo(33), list, false);
            }
            break;
            case 85: /* reduce ASpecialExprPrimeSpecialExprPrime */
            {
                ArrayList<Object> list = new85();
                push(goTo(34), list, false);
            }
            break;
            case 86: /* reduce ASpecialExprPrime */
            {
                ArrayList<Object> list = new86();
                push(goTo(34), list, false);
            }
            break;
            case 87: /* reduce ASumOpSpecialSyntax */
            {
                ArrayList<Object> list = new87();
                push(goTo(35), list, false);
            }
            break;
            case 88: /* reduce AFilterOpSpecialSyntax */
            {
                ArrayList<Object> list = new88();
                push(goTo(35), list, false);
            }
            break;
            case 89: /* reduce AGroupbyOpSpecialSyntax */
            {
                ArrayList<Object> list = new89();
                push(goTo(35), list, false);
            }
            break;
            case 90: /* reduce AMeanOpSpecialSyntax */
            {
                ArrayList<Object> list = new90();
                push(goTo(35), list, false);
            }
            break;
            case 91: /* reduce ACountOpSpecialSyntax */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list, false);
            }
            break;
            case 92: /* reduce ASortOpSpecialSyntax */
            {
                ArrayList<Object> list = new92();
                push(goTo(35), list, false);
            }
            break;
            case 93: /* reduce ASumSum */
            {
                ArrayList<Object> list = new93();
                push(goTo(36), list, false);
            }
            break;
            case 94: /* reduce AFilterFilter */
            {
                ArrayList<Object> list = new94();
                push(goTo(37), list, false);
            }
            break;
            case 95: /* reduce AGroupbyGroupby */
            {
                ArrayList<Object> list = new95();
                push(goTo(38), list, false);
            }
            break;
            case 96: /* reduce AMeanMean */
            {
                ArrayList<Object> list = new96();
                push(goTo(39), list, false);
            }
            break;
            case 97: /* reduce ACountCount */
            {
                ArrayList<Object> list = new97();
                push(goTo(40), list, false);
            }
            break;
            case 98: /* reduce ASortAscSort */
            {
                ArrayList<Object> list = new98();
                push(goTo(41), list, false);
            }
            break;
            case 99: /* reduce ASortDescSort */
            {
                ArrayList<Object> list = new99();
                push(goTo(41), list, false);
            }
            break;
            case 100: /* reduce ASortSort */
            {
                ArrayList<Object> list = new100();
                push(goTo(41), list, false);
            }
            break;
            case 101: /* reduce AImportWithoutSeperatorImport */
            {
                ArrayList<Object> list = new101();
                push(goTo(42), list, false);
            }
            break;
            case 102: /* reduce AImportWithSeperatorImport */
            {
                ArrayList<Object> list = new102();
                push(goTo(42), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStmts pstmtsNode2;
        pstmtsNode2 = (PStmts)nodeArrayList1.get(0);

        pprogramNode1 = new AProgramProgram(pstmtsNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AStatementsStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmts pstmtsNode1;
        {
            // Block
        PStmt pstmtNode2;
        TSemi tsemiNode3;
        PStmts pstmtsNode4;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);
        pstmtsNode4 = (PStmts)nodeArrayList3.get(0);

        pstmtsNode1 = new AStatementsStmts(pstmtNode2, tsemiNode3, pstmtsNode4);
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmts pstmtsNode1;
        {
            // Block

        pstmtsNode1 = new AStmts();
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AImportStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PImport pimportNode2;
        pimportNode2 = (PImport)nodeArrayList1.get(0);

        pstmtNode1 = new AImportStmtStmt(pimportNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclarationStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PDcl pdclNode2;
        pdclNode2 = (PDcl)nodeArrayList1.get(0);

        pstmtNode1 = new ADeclarationStmt(pdclNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAssignmentStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstmtNode1 = new AAssignmentStatementStmt(passignmentNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AArrayOperationsStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PArrayOp parrayopNode2;
        parrayopNode2 = (PArrayOp)nodeArrayList1.get(0);

        pstmtNode1 = new AArrayOperationsStmt(parrayopNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AForLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwFor tkwforNode2;
        TId tidNode3;
        TKwIn tkwinNode4;
        PVal pvalNode5;
        PBlock pblockNode6;
        tkwforNode2 = (TKwFor)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tkwinNode4 = (TKwIn)nodeArrayList3.get(0);
        pvalNode5 = (PVal)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pstmtNode1 = new AForLoopStmt(tkwforNode2, tidNode3, tkwinNode4, pvalNode5, pblockNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AWhileLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwWhile tkwwhileNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        tkwwhileNode2 = (TKwWhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pstmtNode1 = new AWhileLoopStmt(tkwwhileNode2, pexprNode3, pblockNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AControlStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        PInControlStmt pincontrolstmtNode5;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        pincontrolstmtNode5 = (PInControlStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AControlStatementStmt(tkwifNode2, pexprNode3, pblockNode4, pincontrolstmtNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce APrintStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwPrint tkwprintNode2;
        PExpr pexprNode3;
        tkwprintNode2 = (TKwPrint)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pstmtNode1 = new APrintStatementStmt(tkwprintNode2, pexprNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACsvOperationStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCsvOp pcsvopNode2;
        pcsvopNode2 = (PCsvOp)nodeArrayList1.get(0);

        pstmtNode1 = new ACsvOperationStmt(pcsvopNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AExportStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwExport tkwexportNode2;
        TId tidNode3;
        TKwTo tkwtoNode4;
        PExpr pexprNode5;
        tkwexportNode2 = (TKwExport)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tkwtoNode4 = (TKwTo)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        pstmtNode1 = new AExportStatementStmt(tkwexportNode2, tidNode3, tkwtoNode4, pexprNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AReturnStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PReturn preturnNode2;
        preturnNode2 = (PReturn)nodeArrayList1.get(0);

        pstmtNode1 = new AReturnStatementStmt(preturnNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ABreakStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwBreak tkwbreakNode2;
        tkwbreakNode2 = (TKwBreak)nodeArrayList1.get(0);

        pstmtNode1 = new ABreakStatementStmt(tkwbreakNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVariableDeclarationInitializationDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDcl pdclNode1;
        {
            // Block
        TType ttypeNode2;
        TId tidNode3;
        TOpAssign topassignNode4;
        PExpr pexprNode5;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        topassignNode4 = (TOpAssign)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        pdclNode1 = new AVariableDeclarationInitializationDcl(ttypeNode2, tidNode3, topassignNode4, pexprNode5);
        }
	nodeList.add(pdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVariableDeclarationDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDcl pdclNode1;
        {
            // Block
        TType ttypeNode2;
        TId tidNode3;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdclNode1 = new AVariableDeclarationDcl(ttypeNode2, tidNode3);
        }
	nodeList.add(pdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AConstDeclarationInitializationDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDcl pdclNode1;
        {
            // Block
        TKwConst tkwconstNode2;
        TType ttypeNode3;
        TId tidNode4;
        TOpAssign topassignNode5;
        PExpr pexprNode6;
        tkwconstNode2 = (TKwConst)nodeArrayList1.get(0);
        ttypeNode3 = (TType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        topassignNode5 = (TOpAssign)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);

        pdclNode1 = new AConstDeclarationInitializationDcl(tkwconstNode2, ttypeNode3, tidNode4, topassignNode5, pexprNode6);
        }
	nodeList.add(pdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AFunctionDeclarationDcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDcl pdclNode1;
        {
            // Block
        TType ttypeNode2;
        TKwFunction tkwfunctionNode3;
        TId tidNode4;
        TLPar tlparNode5;
        PFunctionParam pfunctionparamNode6;
        TRPar trparNode7;
        PFunctionBody pfunctionbodyNode8;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tkwfunctionNode3 = (TKwFunction)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pfunctionparamNode6 = (PFunctionParam)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        pfunctionbodyNode8 = (PFunctionBody)nodeArrayList7.get(0);

        pdclNode1 = new AFunctionDeclarationDcl(ttypeNode2, tkwfunctionNode3, tidNode4, tlparNode5, pfunctionparamNode6, trparNode7, pfunctionbodyNode8);
        }
	nodeList.add(pdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFunctionParamFunctionParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionParam pfunctionparamNode1;
        {
            // Block
        PDcl pdclNode2;
        PFunctionParamPrime pfunctionparamprimeNode3;
        pdclNode2 = (PDcl)nodeArrayList1.get(0);
        pfunctionparamprimeNode3 = (PFunctionParamPrime)nodeArrayList2.get(0);

        pfunctionparamNode1 = new AFunctionParamFunctionParam(pdclNode2, pfunctionparamprimeNode3);
        }
	nodeList.add(pfunctionparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AFunctionParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFunctionParam pfunctionparamNode1;
        {
            // Block

        pfunctionparamNode1 = new AFunctionParam();
        }
	nodeList.add(pfunctionparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFunctionParamPrimeFunctionParamPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionParamPrime pfunctionparamprimeNode1;
        {
            // Block
        TSopComma tsopcommaNode2;
        PDcl pdclNode3;
        PFunctionParamPrime pfunctionparamprimeNode4;
        tsopcommaNode2 = (TSopComma)nodeArrayList1.get(0);
        pdclNode3 = (PDcl)nodeArrayList2.get(0);
        pfunctionparamprimeNode4 = (PFunctionParamPrime)nodeArrayList3.get(0);

        pfunctionparamprimeNode1 = new AFunctionParamPrimeFunctionParamPrime(tsopcommaNode2, pdclNode3, pfunctionparamprimeNode4);
        }
	nodeList.add(pfunctionparamprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFunctionParamPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFunctionParamPrime pfunctionparamprimeNode1;
        {
            // Block

        pfunctionparamprimeNode1 = new AFunctionParamPrime();
        }
	nodeList.add(pfunctionparamprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFunctionBodyFunctionBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        TLCbrack tlcbrackNode2;
        PStmts pstmtsNode3;
        TRCbrack trcbrackNode4;
        tlcbrackNode2 = (TLCbrack)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        trcbrackNode4 = (TRCbrack)nodeArrayList3.get(0);

        pfunctionbodyNode1 = new AFunctionBodyFunctionBody(tlcbrackNode2, pstmtsNode3, trcbrackNode4);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AReturnReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturn preturnNode1;
        {
            // Block
        TKwReturn tkwreturnNode2;
        PExpr pexprNode3;
        tkwreturnNode2 = (TKwReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        preturnNode1 = new AReturnReturn(tkwreturnNode2, pexprNode3);
        }
	nodeList.add(preturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFunctionCallParamFunctionCallParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCallParam pfunctioncallparamNode1;
        {
            // Block
        PExpr pexprNode2;
        PFunctionCallParamPrime pfunctioncallparamprimeNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pfunctioncallparamprimeNode3 = (PFunctionCallParamPrime)nodeArrayList2.get(0);

        pfunctioncallparamNode1 = new AFunctionCallParamFunctionCallParam(pexprNode2, pfunctioncallparamprimeNode3);
        }
	nodeList.add(pfunctioncallparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFunctionCallParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFunctionCallParam pfunctioncallparamNode1;
        {
            // Block

        pfunctioncallparamNode1 = new AFunctionCallParam();
        }
	nodeList.add(pfunctioncallparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFunctionCallParamPrimeFunctionCallParamPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCallParamPrime pfunctioncallparamprimeNode1;
        {
            // Block
        TSopComma tsopcommaNode2;
        PExpr pexprNode3;
        PFunctionCallParamPrime pfunctioncallparamprimeNode4;
        tsopcommaNode2 = (TSopComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pfunctioncallparamprimeNode4 = (PFunctionCallParamPrime)nodeArrayList3.get(0);

        pfunctioncallparamprimeNode1 = new AFunctionCallParamPrimeFunctionCallParamPrime(tsopcommaNode2, pexprNode3, pfunctioncallparamprimeNode4);
        }
	nodeList.add(pfunctioncallparamprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AFunctionCallParamPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFunctionCallParamPrime pfunctioncallparamprimeNode1;
        {
            // Block

        pfunctioncallparamprimeNode1 = new AFunctionCallParamPrime();
        }
	nodeList.add(pfunctioncallparamprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AFunctionCallFunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PFunctionCallParam pfunctioncallparamNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pfunctioncallparamNode4 = (PFunctionCallParam)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCallFunctionCall(tidNode2, tlparNode3, pfunctioncallparamNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABlockStmtBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLCbrack tlcbrackNode2;
        PStmts pstmtsNode3;
        TRCbrack trcbrackNode4;
        tlcbrackNode2 = (TLCbrack)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        trcbrackNode4 = (TRCbrack)nodeArrayList3.get(0);

        pblockNode1 = new ABlockStmtBlock(tlcbrackNode2, pstmtsNode3, trcbrackNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AElifStatementInControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInControlStmt pincontrolstmtNode1;
        {
            // Block
        TKwElse tkwelseNode2;
        TKwIf tkwifNode3;
        PExpr pexprNode4;
        PBlock pblockNode5;
        tkwelseNode2 = (TKwElse)nodeArrayList1.get(0);
        tkwifNode3 = (TKwIf)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pincontrolstmtNode1 = new AElifStatementInControlStmt(tkwelseNode2, tkwifNode3, pexprNode4, pblockNode5);
        }
	nodeList.add(pincontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AElseStatementInControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInControlStmt pincontrolstmtNode1;
        {
            // Block
        PElseStatement pelsestatementNode2;
        pelsestatementNode2 = (PElseStatement)nodeArrayList1.get(0);

        pincontrolstmtNode1 = new AElseStatementInControlStmt(pelsestatementNode2);
        }
	nodeList.add(pincontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AElseBlockStatementElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TKwElse tkwelseNode2;
        PBlock pblockNode3;
        tkwelseNode2 = (TKwElse)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pelsestatementNode1 = new AElseBlockStatementElseStatement(tkwelseNode2, pblockNode3);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PElseStatement pelsestatementNode1;
        {
            // Block

        pelsestatementNode1 = new AElseStatement();
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAssignAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TId tidNode2;
        PIndexing pindexingNode3;
        TOpAssign topassignNode4;
        PExpr pexprNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pindexingNode3 = (PIndexing)nodeArrayList2.get(0);
        topassignNode4 = (TOpAssign)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        passignmentNode1 = new AAssignAssignment(tidNode2, pindexingNode3, topassignNode4, pexprNode5);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAexprvalprimeexpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PVal pvalNode3;
        PExprPrime pexprprimeNode4;
        pvalNode3 = (PVal)nodeArrayList1.get(0);
        pexprprimeNode4 = (PExprPrime)nodeArrayList2.get(0);

        pexprNode1 = new AExprValPrimeExpr(null, pvalNode3, pexprprimeNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAexprvalprimeexpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TBopNot tbopnotNode2;
        PVal pvalNode3;
        PExprPrime pexprprimeNode4;
        tbopnotNode2 = (TBopNot)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        pexprprimeNode4 = (PExprPrime)nodeArrayList3.get(0);

        pexprNode1 = new AExprValPrimeExpr(tbopnotNode2, pvalNode3, pexprprimeNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExprSpecialExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PSpecialExpr pspecialexprNode2;
        TId tidNode3;
        pspecialexprNode2 = (PSpecialExpr)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pexprNode1 = new AExprSpecialExpr(pspecialexprNode2, tidNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExprArrayExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PArrayExpr parrayexprNode2;
        parrayexprNode2 = (PArrayExpr)nodeArrayList1.get(0);

        pexprNode1 = new AExprArrayExpr(parrayexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExprPrimeOperatorValPrimeExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprPrime pexprprimeNode1;
        {
            // Block
        PBinInfixOp pbininfixopNode2;
        PVal pvalNode3;
        PExprPrime pexprprimeNode4;
        pbininfixopNode2 = (PBinInfixOp)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        pexprprimeNode4 = (PExprPrime)nodeArrayList3.get(0);

        pexprprimeNode1 = new AExprPrimeOperatorValPrimeExprPrime(pbininfixopNode2, pvalNode3, pexprprimeNode4);
        }
	nodeList.add(pexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExprPrime pexprprimeNode1;
        {
            // Block

        pexprprimeNode1 = new AExprPrime();
        }
	nodeList.add(pexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ACsvOperationAddCsvOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvOp pcsvopNode1;
        {
            // Block
        PCsvAdd pcsvaddNode2;
        pcsvaddNode2 = (PCsvAdd)nodeArrayList1.get(0);

        pcsvopNode1 = new ACsvOperationAddCsvOp(pcsvaddNode2);
        }
	nodeList.add(pcsvopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ACsvOperationRemoveCsvOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvOp pcsvopNode1;
        {
            // Block
        PCsvRemove pcsvremoveNode2;
        pcsvremoveNode2 = (PCsvRemove)nodeArrayList1.get(0);

        pcsvopNode1 = new ACsvOperationRemoveCsvOp(pcsvremoveNode2);
        }
	nodeList.add(pcsvopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ACsvOperationRemoveAtCsvOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvOp pcsvopNode1;
        {
            // Block
        PCsvRemoveAt pcsvremoveatNode2;
        pcsvremoveatNode2 = (PCsvRemoveAt)nodeArrayList1.get(0);

        pcsvopNode1 = new ACsvOperationRemoveAtCsvOp(pcsvremoveatNode2);
        }
	nodeList.add(pcsvopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ACsvOperationInsertCsvOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvOp pcsvopNode1;
        {
            // Block
        PCsvInsert pcsvinsertNode2;
        pcsvinsertNode2 = (PCsvInsert)nodeArrayList1.get(0);

        pcsvopNode1 = new ACsvOperationInsertCsvOp(pcsvinsertNode2);
        }
	nodeList.add(pcsvopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAddToCsvCsvAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvAdd pcsvaddNode1;
        {
            // Block
        TKwAdd tkwaddNode2;
        POrientation porientationNode3;
        PArrayExpr parrayexprNode4;
        TKwIn tkwinNode5;
        TId tidNode6;
        tkwaddNode2 = (TKwAdd)nodeArrayList1.get(0);
        porientationNode3 = (POrientation)nodeArrayList2.get(0);
        parrayexprNode4 = (PArrayExpr)nodeArrayList3.get(0);
        tkwinNode5 = (TKwIn)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);

        pcsvaddNode1 = new AAddToCsvCsvAdd(tkwaddNode2, porientationNode3, parrayexprNode4, tkwinNode5, tidNode6);
        }
	nodeList.add(pcsvaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ARemoveFromCsvCsvRemove */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvRemove pcsvremoveNode1;
        {
            // Block
        TKwRemove tkwremoveNode2;
        POrientation porientationNode3;
        TKwIn tkwinNode4;
        TId tidNode5;
        tkwremoveNode2 = (TKwRemove)nodeArrayList1.get(0);
        porientationNode3 = (POrientation)nodeArrayList2.get(0);
        tkwinNode4 = (TKwIn)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);

        pcsvremoveNode1 = new ARemoveFromCsvCsvRemove(tkwremoveNode2, porientationNode3, tkwinNode4, tidNode5);
        }
	nodeList.add(pcsvremoveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ARemoveAtFromCsvCsvRemoveAt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvRemoveAt pcsvremoveatNode1;
        {
            // Block
        TKwRemoveAt tkwremoveatNode2;
        POrientation porientationNode3;
        PVal pvalNode4;
        TKwIn tkwinNode5;
        TId tidNode6;
        tkwremoveatNode2 = (TKwRemoveAt)nodeArrayList1.get(0);
        porientationNode3 = (POrientation)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);
        tkwinNode5 = (TKwIn)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);

        pcsvremoveatNode1 = new ARemoveAtFromCsvCsvRemoveAt(tkwremoveatNode2, porientationNode3, pvalNode4, tkwinNode5, tidNode6);
        }
	nodeList.add(pcsvremoveatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AInsertFromCsvCsvInsert */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCsvInsert pcsvinsertNode1;
        {
            // Block
        TKwInsert tkwinsertNode2;
        POrientation porientationNode3;
        PVal pvalNode4;
        PArrayExpr parrayexprNode5;
        TKwIn tkwinNode6;
        TId tidNode7;
        tkwinsertNode2 = (TKwInsert)nodeArrayList1.get(0);
        porientationNode3 = (POrientation)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);
        parrayexprNode5 = (PArrayExpr)nodeArrayList4.get(0);
        tkwinNode6 = (TKwIn)nodeArrayList5.get(0);
        tidNode7 = (TId)nodeArrayList6.get(0);

        pcsvinsertNode1 = new AInsertFromCsvCsvInsert(tkwinsertNode2, porientationNode3, pvalNode4, parrayexprNode5, tkwinNode6, tidNode7);
        }
	nodeList.add(pcsvinsertNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ACsvOrientationRowOrientation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrientation porientationNode1;
        {
            // Block
        TKwRow tkwrowNode2;
        tkwrowNode2 = (TKwRow)nodeArrayList1.get(0);

        porientationNode1 = new ACsvOrientationRowOrientation(tkwrowNode2);
        }
	nodeList.add(porientationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ACsvOrientationColumnOrientation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrientation porientationNode1;
        {
            // Block
        TKwColumn tkwcolumnNode2;
        tkwcolumnNode2 = (TKwColumn)nodeArrayList1.get(0);

        porientationNode1 = new ACsvOrientationColumnOrientation(tkwcolumnNode2);
        }
	nodeList.add(porientationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AIndexingIndexing */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIndexing pindexingNode1;
        {
            // Block
        TLCbrack tlcbrackNode2;
        PExpr pexprNode3;
        TRCbrack trcbrackNode4;
        PIndexing pindexingNode5;
        tlcbrackNode2 = (TLCbrack)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trcbrackNode4 = (TRCbrack)nodeArrayList3.get(0);
        pindexingNode5 = (PIndexing)nodeArrayList4.get(0);

        pindexingNode1 = new AIndexingIndexing(tlcbrackNode2, pexprNode3, trcbrackNode4, pindexingNode5);
        }
	nodeList.add(pindexingNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AIndexing */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PIndexing pindexingNode1;
        {
            // Block

        pindexingNode1 = new AIndexing();
        }
	nodeList.add(pindexingNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AArrayExprValPrimeArrayExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExpr parrayexprNode1;
        {
            // Block
        TLBrack tlbrackNode2;
        PVal pvalNode3;
        PArrayExprPrime parrayexprprimeNode4;
        TRBrack trbrackNode5;
        tlbrackNode2 = (TLBrack)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        parrayexprprimeNode4 = (PArrayExprPrime)nodeArrayList3.get(0);
        trbrackNode5 = (TRBrack)nodeArrayList4.get(0);

        parrayexprNode1 = new AArrayExprValPrimeArrayExpr(tlbrackNode2, pvalNode3, parrayexprprimeNode4, trbrackNode5);
        }
	nodeList.add(parrayexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AArrayExprPrimeExtraArrayExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExprPrime parrayexprprimeNode1;
        {
            // Block
        TSopComma tsopcommaNode2;
        PVal pvalNode3;
        PArrayExprPrime parrayexprprimeNode4;
        tsopcommaNode2 = (TSopComma)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        parrayexprprimeNode4 = (PArrayExprPrime)nodeArrayList3.get(0);

        parrayexprprimeNode1 = new AArrayExprPrimeExtraArrayExprPrime(tsopcommaNode2, pvalNode3, parrayexprprimeNode4);
        }
	nodeList.add(parrayexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AArrayExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PArrayExprPrime parrayexprprimeNode1;
        {
            // Block

        parrayexprprimeNode1 = new AArrayExprPrime();
        }
	nodeList.add(parrayexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AArrayOperationAddArrayOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayOp parrayopNode1;
        {
            // Block
        PArrayAdd parrayaddNode2;
        parrayaddNode2 = (PArrayAdd)nodeArrayList1.get(0);

        parrayopNode1 = new AArrayOperationAddArrayOp(parrayaddNode2);
        }
	nodeList.add(parrayopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AArrayOperationRemoveArrayOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayOp parrayopNode1;
        {
            // Block
        PArrayRemove parrayremoveNode2;
        parrayremoveNode2 = (PArrayRemove)nodeArrayList1.get(0);

        parrayopNode1 = new AArrayOperationRemoveArrayOp(parrayremoveNode2);
        }
	nodeList.add(parrayopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AArrayOperationRemoveAtArrayOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayOp parrayopNode1;
        {
            // Block
        PArrayRemoveAt parrayremoveatNode2;
        parrayremoveatNode2 = (PArrayRemoveAt)nodeArrayList1.get(0);

        parrayopNode1 = new AArrayOperationRemoveAtArrayOp(parrayremoveatNode2);
        }
	nodeList.add(parrayopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AArrayOperationInsertArrayOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayOp parrayopNode1;
        {
            // Block
        PArrayInsert parrayinsertNode2;
        parrayinsertNode2 = (PArrayInsert)nodeArrayList1.get(0);

        parrayopNode1 = new AArrayOperationInsertArrayOp(parrayinsertNode2);
        }
	nodeList.add(parrayopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAddToArrayArrayAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayAdd parrayaddNode1;
        {
            // Block
        TKwAdd tkwaddNode2;
        TLPar tlparNode3;
        PArrayExpr parrayexprNode4;
        TRPar trparNode5;
        tkwaddNode2 = (TKwAdd)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parrayexprNode4 = (PArrayExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        parrayaddNode1 = new AAddToArrayArrayAdd(tkwaddNode2, tlparNode3, parrayexprNode4, trparNode5);
        }
	nodeList.add(parrayaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ARemoveFromArrayArrayRemove */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayRemove parrayremoveNode1;
        {
            // Block
        TKwRemove tkwremoveNode2;
        TKwIn tkwinNode3;
        TId tidNode4;
        tkwremoveNode2 = (TKwRemove)nodeArrayList1.get(0);
        tkwinNode3 = (TKwIn)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        parrayremoveNode1 = new ARemoveFromArrayArrayRemove(tkwremoveNode2, tkwinNode3, tidNode4);
        }
	nodeList.add(parrayremoveNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ARemoveAtFromArrayArrayRemoveAt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayRemoveAt parrayremoveatNode1;
        {
            // Block
        TKwRemoveAt tkwremoveatNode2;
        PIndexing pindexingNode3;
        TKwIn tkwinNode4;
        TId tidNode5;
        tkwremoveatNode2 = (TKwRemoveAt)nodeArrayList1.get(0);
        pindexingNode3 = (PIndexing)nodeArrayList2.get(0);
        tkwinNode4 = (TKwIn)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);

        parrayremoveatNode1 = new ARemoveAtFromArrayArrayRemoveAt(tkwremoveatNode2, pindexingNode3, tkwinNode4, tidNode5);
        }
	nodeList.add(parrayremoveatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AInsertToArrayArrayInsert */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayInsert parrayinsertNode1;
        {
            // Block
        TKwInsert tkwinsertNode2;
        PVal pvalNode3;
        PArrayExpr parrayexprNode4;
        TKwIn tkwinNode5;
        TId tidNode6;
        tkwinsertNode2 = (TKwInsert)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        parrayexprNode4 = (PArrayExpr)nodeArrayList3.get(0);
        tkwinNode5 = (TKwIn)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);

        parrayinsertNode1 = new AInsertToArrayArrayInsert(tkwinsertNode2, pvalNode3, parrayexprNode4, tkwinNode5, tidNode6);
        }
	nodeList.add(parrayinsertNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AValIdVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvalNode1 = new AValIdVal(tidNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AFunctionCallValueVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pvalNode1 = new AFunctionCallValueVal(pfunctioncallNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AValFloatnumVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TFloatnum tfloatnumNode2;
        tfloatnumNode2 = (TFloatnum)nodeArrayList1.get(0);

        pvalNode1 = new AValFloatnumVal(tfloatnumNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AValIntnumVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TIntnum tintnumNode2;
        tintnumNode2 = (TIntnum)nodeArrayList1.get(0);

        pvalNode1 = new AValIntnumVal(tintnumNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AValStringVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalNode1 = new AValStringVal(tstringNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AValBoolVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        pvalNode1 = new AValBoolVal(tboolNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce APlusInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpPlus topplusNode2;
        topplusNode2 = (TOpPlus)nodeArrayList1.get(0);

        pbininfixopNode1 = new APlusInfixBinInfixOp(topplusNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AMinusInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpMinus topminusNode2;
        topminusNode2 = (TOpMinus)nodeArrayList1.get(0);

        pbininfixopNode1 = new AMinusInfixBinInfixOp(topminusNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMultiplicationInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpMult topmultNode2;
        topmultNode2 = (TOpMult)nodeArrayList1.get(0);

        pbininfixopNode1 = new AMultiplicationInfixBinInfixOp(topmultNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ADivisionInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpDiv topdivNode2;
        topdivNode2 = (TOpDiv)nodeArrayList1.get(0);

        pbininfixopNode1 = new ADivisionInfixBinInfixOp(topdivNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AModuloInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpMod topmodNode2;
        topmodNode2 = (TOpMod)nodeArrayList1.get(0);

        pbininfixopNode1 = new AModuloInfixBinInfixOp(topmodNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAndInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopAnd tbopandNode2;
        tbopandNode2 = (TBopAnd)nodeArrayList1.get(0);

        pbininfixopNode1 = new AAndInfixBinInfixOp(tbopandNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AOrInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopOr tboporNode2;
        tboporNode2 = (TBopOr)nodeArrayList1.get(0);

        pbininfixopNode1 = new AOrInfixBinInfixOp(tboporNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AEqualityInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopEq tbopeqNode2;
        tbopeqNode2 = (TBopEq)nodeArrayList1.get(0);

        pbininfixopNode1 = new AEqualityInfixBinInfixOp(tbopeqNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AGreaterThanInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopGthan tbopgthanNode2;
        tbopgthanNode2 = (TBopGthan)nodeArrayList1.get(0);

        pbininfixopNode1 = new AGreaterThanInfixBinInfixOp(tbopgthanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AGreaterThanEqualInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopGethan tbopgethanNode2;
        tbopgethanNode2 = (TBopGethan)nodeArrayList1.get(0);

        pbininfixopNode1 = new AGreaterThanEqualInfixBinInfixOp(tbopgethanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ALessThanInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopLthan tboplthanNode2;
        tboplthanNode2 = (TBopLthan)nodeArrayList1.get(0);

        pbininfixopNode1 = new ALessThanInfixBinInfixOp(tboplthanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ALessThanEqualInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopLethan tboplethanNode2;
        tboplethanNode2 = (TBopLethan)nodeArrayList1.get(0);

        pbininfixopNode1 = new ALessThanEqualInfixBinInfixOp(tboplethanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANotEqualInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopNeq tbopneqNode2;
        tbopneqNode2 = (TBopNeq)nodeArrayList1.get(0);

        pbininfixopNode1 = new ANotEqualInfixBinInfixOp(tbopneqNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ASpeicalExpressionSpecialExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialExpr pspecialexprNode1;
        {
            // Block
        PSpecialSyntax pspecialsyntaxNode2;
        PSpecialExprPrime pspecialexprprimeNode3;
        pspecialsyntaxNode2 = (PSpecialSyntax)nodeArrayList1.get(0);
        pspecialexprprimeNode3 = (PSpecialExprPrime)nodeArrayList2.get(0);

        pspecialexprNode1 = new ASpeicalExpressionSpecialExpr(pspecialsyntaxNode2, pspecialexprprimeNode3);
        }
	nodeList.add(pspecialexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ASpecialExprPrimeSpecialExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialExprPrime pspecialexprprimeNode1;
        {
            // Block
        PSpecialSyntax pspecialsyntaxNode2;
        PSpecialExprPrime pspecialexprprimeNode3;
        pspecialsyntaxNode2 = (PSpecialSyntax)nodeArrayList1.get(0);
        pspecialexprprimeNode3 = (PSpecialExprPrime)nodeArrayList2.get(0);

        pspecialexprprimeNode1 = new ASpecialExprPrimeSpecialExprPrime(pspecialsyntaxNode2, pspecialexprprimeNode3);
        }
	nodeList.add(pspecialexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ASpecialExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSpecialExprPrime pspecialexprprimeNode1;
        {
            // Block

        pspecialexprprimeNode1 = new ASpecialExprPrime();
        }
	nodeList.add(pspecialexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ASumOpSpecialSyntax */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialSyntax pspecialsyntaxNode1;
        {
            // Block
        TSopSum tsopsumNode2;
        tsopsumNode2 = (TSopSum)nodeArrayList1.get(0);

        pspecialsyntaxNode1 = new ASumOpSpecialSyntax(tsopsumNode2);
        }
	nodeList.add(pspecialsyntaxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AFilterOpSpecialSyntax */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialSyntax pspecialsyntaxNode1;
        {
            // Block
        TSopFilter tsopfilterNode2;
        tsopfilterNode2 = (TSopFilter)nodeArrayList1.get(0);

        pspecialsyntaxNode1 = new AFilterOpSpecialSyntax(tsopfilterNode2);
        }
	nodeList.add(pspecialsyntaxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AGroupbyOpSpecialSyntax */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialSyntax pspecialsyntaxNode1;
        {
            // Block
        TSopGroupby tsopgroupbyNode2;
        tsopgroupbyNode2 = (TSopGroupby)nodeArrayList1.get(0);

        pspecialsyntaxNode1 = new AGroupbyOpSpecialSyntax(tsopgroupbyNode2);
        }
	nodeList.add(pspecialsyntaxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AMeanOpSpecialSyntax */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialSyntax pspecialsyntaxNode1;
        {
            // Block
        TSopMean tsopmeanNode2;
        tsopmeanNode2 = (TSopMean)nodeArrayList1.get(0);

        pspecialsyntaxNode1 = new AMeanOpSpecialSyntax(tsopmeanNode2);
        }
	nodeList.add(pspecialsyntaxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ACountOpSpecialSyntax */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialSyntax pspecialsyntaxNode1;
        {
            // Block
        TSopCount tsopcountNode2;
        tsopcountNode2 = (TSopCount)nodeArrayList1.get(0);

        pspecialsyntaxNode1 = new ACountOpSpecialSyntax(tsopcountNode2);
        }
	nodeList.add(pspecialsyntaxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ASortOpSpecialSyntax */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialSyntax pspecialsyntaxNode1;
        {
            // Block
        TSopSort tsopsortNode2;
        tsopsortNode2 = (TSopSort)nodeArrayList1.get(0);

        pspecialsyntaxNode1 = new ASortOpSpecialSyntax(tsopsortNode2);
        }
	nodeList.add(pspecialsyntaxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ASumSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSum psumNode1;
        {
            // Block
        TSopSum tsopsumNode2;
        tsopsumNode2 = (TSopSum)nodeArrayList1.get(0);

        psumNode1 = new ASumSum(tsopsumNode2);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AFilterFilter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFilter pfilterNode1;
        {
            // Block
        TSopFilter tsopfilterNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tsopfilterNode2 = (TSopFilter)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfilterNode1 = new AFilterFilter(tsopfilterNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfilterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AGroupbyGroupby */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGroupby pgroupbyNode1;
        {
            // Block
        TSopGroupby tsopgroupbyNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tsopgroupbyNode2 = (TSopGroupby)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pgroupbyNode1 = new AGroupbyGroupby(tsopgroupbyNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pgroupbyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AMeanMean */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMean pmeanNode1;
        {
            // Block
        TSopMean tsopmeanNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tsopmeanNode2 = (TSopMean)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmeanNode1 = new AMeanMean(tsopmeanNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pmeanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ACountCount */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCount pcountNode1;
        {
            // Block
        TSopCount tsopcountNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tsopcountNode2 = (TSopCount)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pcountNode1 = new ACountCount(tsopcountNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pcountNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ASortAscSort */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSort psortNode1;
        {
            // Block
        TSopSort tsopsortNode2;
        TKwSortOrderAsc tkwsortorderascNode3;
        tsopsortNode2 = (TSopSort)nodeArrayList1.get(0);
        tkwsortorderascNode3 = (TKwSortOrderAsc)nodeArrayList2.get(0);

        psortNode1 = new ASortAscSort(tsopsortNode2, tkwsortorderascNode3);
        }
	nodeList.add(psortNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ASortDescSort */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSort psortNode1;
        {
            // Block
        TSopSort tsopsortNode2;
        TKwSortOrderDsc tkwsortorderdscNode3;
        tsopsortNode2 = (TSopSort)nodeArrayList1.get(0);
        tkwsortorderdscNode3 = (TKwSortOrderDsc)nodeArrayList2.get(0);

        psortNode1 = new ASortDescSort(tsopsortNode2, tkwsortorderdscNode3);
        }
	nodeList.add(psortNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ASortSort */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSort psortNode1;
        {
            // Block
        TSopSort tsopsortNode2;
        tsopsortNode2 = (TSopSort)nodeArrayList1.get(0);

        psortNode1 = new ASortSort(tsopsortNode2);
        }
	nodeList.add(psortNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AImportWithoutSeperatorImport */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImport pimportNode1;
        {
            // Block
        TKwImport tkwimportNode2;
        TString tstringNode3;
        TKwAs tkwasNode4;
        TId tidNode5;
        tkwimportNode2 = (TKwImport)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tkwasNode4 = (TKwAs)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);

        pimportNode1 = new AImportWithoutSeperatorImport(tkwimportNode2, tstringNode3, tkwasNode4, tidNode5);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AImportWithSeperatorImport */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImport pimportNode1;
        {
            // Block
        TKwImport tkwimportNode2;
        TString tstringNode3;
        TKwSeparatedBy tkwseparatedbyNode4;
        TChar tcharNode5;
        TKwAs tkwasNode6;
        TId tidNode7;
        tkwimportNode2 = (TKwImport)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tkwseparatedbyNode4 = (TKwSeparatedBy)nodeArrayList3.get(0);
        tcharNode5 = (TChar)nodeArrayList4.get(0);
        tkwasNode6 = (TKwAs)nodeArrayList5.get(0);
        tidNode7 = (TId)nodeArrayList6.get(0);

        pimportNode1 = new AImportWithSeperatorImport(tkwimportNode2, tstringNode3, tkwseparatedbyNode4, tcharNode5, tkwasNode6, tidNode7);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, {11, SHIFT, 1}, {37, SHIFT, 2}, {38, SHIFT, 3}, {39, SHIFT, 4}, {41, SHIFT, 5}, {42, SHIFT, 6}, {44, SHIFT, 7}, {49, SHIFT, 8}, {51, SHIFT, 9}, {52, SHIFT, 10}, {53, SHIFT, 11}, {54, SHIFT, 12}, {55, SHIFT, 13}, {56, SHIFT, 14}, {59, SHIFT, 15}, },
			{{-1, ERROR, 1}, {50, SHIFT, 33}, {59, SHIFT, 34}, },
			{{-1, ERROR, 2}, {7, SHIFT, 35}, },
			{{-1, ERROR, 3}, {59, SHIFT, 36}, },
			{{-1, ERROR, 4}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, ERROR, 5}, {59, SHIFT, 56}, },
			{{-1, ERROR, 6}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, ERROR, 7}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, ERROR, 8}, {11, SHIFT, 59}, },
			{{-1, ERROR, 9}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 11}, {1, SHIFT, 61}, {57, SHIFT, 62}, {58, SHIFT, 63}, },
			{{-1, ERROR, 12}, {43, SHIFT, 65}, {57, SHIFT, 62}, {58, SHIFT, 63}, },
			{{-1, REDUCE, 53}, {3, SHIFT, 67}, {57, SHIFT, 62}, {58, SHIFT, 63}, },
			{{-1, ERROR, 14}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {57, SHIFT, 62}, {58, SHIFT, 63}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 53}, {3, SHIFT, 67}, },
			{{-1, ERROR, 16}, {60, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 18}, {0, SHIFT, 73}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 33}, {59, SHIFT, 74}, },
			{{-1, REDUCE, 16}, {13, SHIFT, 75}, },
			{{-1, ERROR, 35}, {36, SHIFT, 76}, {40, SHIFT, 77}, },
			{{-1, ERROR, 36}, {48, SHIFT, 78}, },
			{{-1, ERROR, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 42}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 65}, {1, SHIFT, 81}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 41}, {14, SHIFT, 82}, {15, SHIFT, 83}, {16, SHIFT, 84}, {17, SHIFT, 85}, {18, SHIFT, 86}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, {22, SHIFT, 90}, {23, SHIFT, 91}, {24, SHIFT, 92}, {25, SHIFT, 93}, {26, SHIFT, 94}, },
			{{-1, ERROR, 54}, {59, SHIFT, 97}, },
			{{-1, REDUCE, 86}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, },
			{{-1, ERROR, 56}, {43, SHIFT, 100}, },
			{{-1, ERROR, 57}, {3, SHIFT, 101}, },
			{{-1, ERROR, 58}, {3, SHIFT, 101}, },
			{{-1, ERROR, 59}, {59, SHIFT, 104}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 61}, {5, SHIFT, 37}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 64}, {5, SHIFT, 37}, },
			{{-1, ERROR, 65}, {59, SHIFT, 107}, },
			{{-1, ERROR, 66}, {43, SHIFT, 108}, },
			{{-1, ERROR, 67}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, ERROR, 68}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {59, SHIFT, 49}, },
			{{-1, ERROR, 69}, {43, SHIFT, 111}, },
			{{-1, ERROR, 70}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {59, SHIFT, 49}, },
			{{-1, ERROR, 71}, {5, SHIFT, 37}, },
			{{-1, ERROR, 72}, {13, SHIFT, 114}, },
			{{-1, REDUCE, 2}, {11, SHIFT, 1}, {37, SHIFT, 2}, {38, SHIFT, 3}, {39, SHIFT, 4}, {41, SHIFT, 5}, {42, SHIFT, 6}, {44, SHIFT, 7}, {49, SHIFT, 8}, {51, SHIFT, 9}, {52, SHIFT, 10}, {53, SHIFT, 11}, {54, SHIFT, 12}, {55, SHIFT, 13}, {56, SHIFT, 14}, {59, SHIFT, 15}, },
			{{-1, ERROR, 74}, {1, SHIFT, 116}, },
			{{-1, ERROR, 75}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, ERROR, 76}, {59, SHIFT, 118}, },
			{{-1, ERROR, 77}, {12, SHIFT, 119}, },
			{{-1, ERROR, 78}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 56}, {29, SHIFT, 121}, },
			{{-1, REDUCE, 41}, {14, SHIFT, 82}, {15, SHIFT, 83}, {16, SHIFT, 84}, {17, SHIFT, 85}, {18, SHIFT, 86}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, {22, SHIFT, 90}, {23, SHIFT, 91}, {24, SHIFT, 92}, {25, SHIFT, 93}, {26, SHIFT, 94}, },
			{{-1, REDUCE, 26}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 96}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 86}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, },
			{{-1, ERROR, 100}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 2}, {11, SHIFT, 1}, {37, SHIFT, 2}, {38, SHIFT, 3}, {39, SHIFT, 4}, {41, SHIFT, 5}, {42, SHIFT, 6}, {44, SHIFT, 7}, {49, SHIFT, 8}, {51, SHIFT, 9}, {52, SHIFT, 10}, {53, SHIFT, 11}, {54, SHIFT, 12}, {55, SHIFT, 13}, {56, SHIFT, 14}, {59, SHIFT, 15}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 34}, {45, SHIFT, 130}, },
			{{-1, ERROR, 104}, {13, SHIFT, 133}, },
			{{-1, ERROR, 105}, {2, SHIFT, 134}, },
			{{-1, ERROR, 106}, {43, SHIFT, 135}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 108}, {59, SHIFT, 136}, },
			{{-1, ERROR, 109}, {4, SHIFT, 137}, },
			{{-1, ERROR, 110}, {43, SHIFT, 138}, },
			{{-1, ERROR, 111}, {59, SHIFT, 139}, },
			{{-1, ERROR, 112}, {5, SHIFT, 37}, },
			{{-1, ERROR, 113}, {43, SHIFT, 141}, },
			{{-1, ERROR, 114}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 20}, {11, SHIFT, 1}, {49, SHIFT, 8}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 119}, {36, SHIFT, 145}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 121}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {59, SHIFT, 49}, },
			{{-1, ERROR, 122}, {6, SHIFT, 147}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 124}, {2, SHIFT, 148}, },
			{{-1, REDUCE, 28}, {29, SHIFT, 149}, },
			{{-1, REDUCE, 41}, {14, SHIFT, 82}, {15, SHIFT, 83}, {16, SHIFT, 84}, {17, SHIFT, 85}, {18, SHIFT, 86}, {19, SHIFT, 87}, {20, SHIFT, 88}, {21, SHIFT, 89}, {22, SHIFT, 90}, {23, SHIFT, 91}, {24, SHIFT, 92}, {25, SHIFT, 93}, {26, SHIFT, 94}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 128}, {3, SHIFT, 101}, },
			{{-1, ERROR, 129}, {4, SHIFT, 153}, },
			{{-1, ERROR, 130}, {3, SHIFT, 101}, {44, SHIFT, 154}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 133}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 135}, {59, SHIFT, 157}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 53}, {3, SHIFT, 67}, },
			{{-1, ERROR, 138}, {59, SHIFT, 159}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 140}, {43, SHIFT, 160}, },
			{{-1, ERROR, 141}, {59, SHIFT, 161}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 22}, {29, SHIFT, 162}, },
			{{-1, ERROR, 144}, {2, SHIFT, 164}, },
			{{-1, ERROR, 145}, {59, SHIFT, 165}, },
			{{-1, REDUCE, 56}, {29, SHIFT, 121}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 149}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 154}, {5, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {27, SHIFT, 42}, {30, SHIFT, 43}, {31, SHIFT, 44}, {32, SHIFT, 45}, {33, SHIFT, 46}, {34, SHIFT, 47}, {35, SHIFT, 48}, {59, SHIFT, 49}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 160}, {59, SHIFT, 169}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 162}, {11, SHIFT, 1}, {49, SHIFT, 8}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 164}, {3, SHIFT, 171}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 28}, {29, SHIFT, 149}, },
			{{-1, ERROR, 168}, {3, SHIFT, 101}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 22}, {29, SHIFT, 162}, },
			{{-1, REDUCE, 2}, {11, SHIFT, 1}, {37, SHIFT, 2}, {38, SHIFT, 3}, {39, SHIFT, 4}, {41, SHIFT, 5}, {42, SHIFT, 6}, {44, SHIFT, 7}, {49, SHIFT, 8}, {51, SHIFT, 9}, {52, SHIFT, 10}, {53, SHIFT, 11}, {54, SHIFT, 12}, {55, SHIFT, 13}, {56, SHIFT, 14}, {59, SHIFT, 15}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 176}, {4, SHIFT, 177}, },
			{{-1, REDUCE, 23}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 16}, },
			{{-1, 17}, {73, 115}, {101, 129}, {171, 176}, },
			{{-1, 18}, },
			{{-1, 19}, {116, 143}, {162, 170}, },
			{{-1, 144}, },
			{{-1, 163}, {170, 175}, },
			{{-1, 172}, },
			{{-1, 20}, },
			{{-1, 124}, },
			{{-1, 150}, {167, 173}, },
			{{-1, 50}, },
			{{-1, 102}, {58, 103}, {128, 152}, {130, 155}, {168, 174}, },
			{{-1, 131}, },
			{{-1, 132}, },
			{{-1, 21}, },
			{{-1, 51}, {6, 57}, {7, 58}, {9, 60}, {67, 109}, {75, 117}, {78, 120}, {81, 125}, {114, 142}, {133, 156}, {149, 167}, {154, 168}, },
			{{-1, 95}, {80, 123}, {126, 151}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 64}, {12, 66}, {13, 68}, {14, 70}, },
			{{-1, 69}, {15, 72}, {137, 158}, },
			{{-1, 52}, {61, 105}, {64, 106}, {71, 113}, {112, 140}, },
			{{-1, 122}, {146, 166}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 53}, {14, 71}, {37, 79}, {42, 80}, {68, 110}, {70, 112}, {96, 126}, {100, 128}, {121, 146}, },
			{{-1, 96}, },
			{{-1, 54}, },
			{{-1, 98}, {99, 127}, },
			{{-1, 55}, {55, 99}, {99, 99}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 32}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: type, 'import', 'export', 'print', 'for', 'while', 'if', 'const', 'return', 'break', 'add', 'remove', 'remove_at', 'insert', id, EOF",
			"expecting: 'function', id",
			"expecting: string",
			"expecting: id",
			"expecting: '[', string, intnum, floatnum, bool, 'not', 'sum', 'filter', 'groupby', 'mean', 'sort', 'count', id",
			"expecting: type",
			"expecting: ';'",
			"expecting: '(', 'column', 'row'",
			"expecting: 'in', 'column', 'row'",
			"expecting: '{', 'in', 'column', 'row'",
			"expecting: string, intnum, floatnum, bool, 'column', 'row', id",
			"expecting: '{', '='",
			"expecting: EOF",
			"expecting: ';', ')', '=', ','",
			"expecting: 'as', 'seperated_by'",
			"expecting: 'to'",
			"expecting: string, intnum, floatnum, bool, id",
			"expecting: ';', ')', '{', '}', '[', ']', '+', '-', '*', '/', '%', '<', '<=', '>', '>=', '==', '!=', 'and', 'or', ',', 'in'",
			"expecting: 'sum', 'filter', 'groupby', 'mean', 'sort', 'count', id",
			"expecting: ';', '(', ')', '{', '}', '[', ']', '+', '-', '*', '/', '%', '<', '<=', '>', '>=', '==', '!=', 'and', 'or', ',', 'in'",
			"expecting: ';', ')', '{', '}', ','",
			"expecting: ';', ')', '{', '}', '+', '-', '*', '/', '%', '<', '<=', '>', '>=', '==', '!=', 'and', 'or', ','",
			"expecting: 'in'",
			"expecting: '{'",
			"expecting: '['",
			"expecting: '[', string, intnum, floatnum, bool, 'in', id",
			"expecting: '='",
			"expecting: '}', type, 'import', 'export', 'print', 'for', 'while', 'if', 'const', 'return', 'break', 'add', 'remove', 'remove_at', 'insert', id, EOF",
			"expecting: '('",
			"expecting: char",
			"expecting: ']', ','",
			"expecting: ')', '[', string, intnum, floatnum, bool, 'not', 'sum', 'filter', 'groupby', 'mean', 'sort', 'count', id",
			"expecting: '}', type, 'import', 'export', 'print', 'for', 'while', 'if', 'const', 'return', 'break', 'add', 'remove', 'remove_at', 'insert', id",
			"expecting: ';', 'else'",
			"expecting: ')'",
			"expecting: '}'",
			"expecting: '}', EOF",
			"expecting: ')', type, 'const'",
			"expecting: ';', ')', ','",
			"expecting: 'as'",
			"expecting: ']'",
			"expecting: ')', ','",
			"expecting: '{', 'if'",
			"expecting: '{', '=', 'in'",
			"expecting: ';', ')', '{', '}', ',', 'in'",
			"expecting: '=', 'in'",
			"expecting: type, 'const'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 3, 4, 4, 5, 4, 6, 7, 8, 9, 10, 11, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 13, 14, 15, 16, 17, 17, 17, 17, 16, 18, 18, 18, 18, 18, 18, 19, 17, 6, 20, 21, 3, 18, 22, 23, 23, 3, 6, 24, 25, 25, 24, 3, 22, 4, 16, 22, 16, 24, 26, 27, 28, 4, 3, 29, 4, 30, 21, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20, 16, 20, 3, 18, 16, 32, 6, 33, 26, 34, 22, 6, 3, 35, 22, 3, 24, 22, 4, 36, 37, 38, 6, 39, 6, 16, 40, 20, 34, 41, 21, 3, 23, 35, 42, 6, 6, 4, 6, 3, 6, 43, 3, 6, 22, 3, 6, 41, 34, 3, 30, 44, 17, 4, 34, 20, 6, 33, 4, 6, 38, 6, 45, 6, 3, 6, 46, 34, 23, 6, 40, 41, 23, 6, 41, 32, 38, 34, 6, 34, 35, 38, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
