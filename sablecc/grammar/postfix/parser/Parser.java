/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.parser;

import postfix.lexer.*;
import postfix.node.*;
import postfix.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AStatementsStmts */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AStmts */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AImportStmtStmt */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ADeclarationStmt */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAssignmentStatementStmt */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AForLoopStmt */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AWhileLoopStmt */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AControlStatementStmt */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce ABlockStmtBlock */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AElifStatementInControlStmt */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AElseStatementInControlStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AElseBlockStatementElseStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AElseStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AAssignAssignment */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AAexprvalprimeexpr1Expr */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AAexprvalprimeexpr2Expr */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AExprSpecialExpr */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AExprPrimeOperatorValPrimeExprPrime */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AExprPrime */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce ASpeicalExpressionSpecialExpr */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce ASpecialExpressionSortSpecialExpr */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce ASpecialExprPrimeSpecialExprPrime */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce ASpecialExprPrime */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce AValIdVal */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AValFloatnumVal */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AValIntnumVal */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AValStringVal */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce AValBoolVal */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce APlusInfixBinInfixOp */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AMinusInfixBinInfixOp */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce AMultiplicationInfixBinInfixOp */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list, false);
            }
            break;
            case 32: /* reduce ADivisionInfixBinInfixOp */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce AModuloInfixBinInfixOp */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list, false);
            }
            break;
            case 34: /* reduce AAndInfixBinInfixOp */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce AOrInfixBinInfixOp */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce AEqualityInfixBinInfixOp */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce AGreaterThanInfixBinInfixOp */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list, false);
            }
            break;
            case 38: /* reduce AGreaterThanEqualInfixBinInfixOp */
            {
                ArrayList<Object> list = new38();
                push(goTo(12), list, false);
            }
            break;
            case 39: /* reduce ALessThanInfixBinInfixOp */
            {
                ArrayList<Object> list = new39();
                push(goTo(12), list, false);
            }
            break;
            case 40: /* reduce ALessThanEqualInfixBinInfixOp */
            {
                ArrayList<Object> list = new40();
                push(goTo(12), list, false);
            }
            break;
            case 41: /* reduce AFilterOpSpecialOp */
            {
                ArrayList<Object> list = new41();
                push(goTo(13), list, false);
            }
            break;
            case 42: /* reduce AGroupbyOpSpecialOp */
            {
                ArrayList<Object> list = new42();
                push(goTo(13), list, false);
            }
            break;
            case 43: /* reduce AMeanOpSpecialOp */
            {
                ArrayList<Object> list = new43();
                push(goTo(13), list, false);
            }
            break;
            case 44: /* reduce ACountOpSpecialOp */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list, false);
            }
            break;
            case 45: /* reduce AImportWithoutSeperatorImportT */
            {
                ArrayList<Object> list = new45();
                push(goTo(14), list, false);
            }
            break;
            case 46: /* reduce AImportWithSeperatorImportT */
            {
                ArrayList<Object> list = new46();
                push(goTo(14), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStmts pstmtsNode2;
        pstmtsNode2 = (PStmts)nodeArrayList1.get(0);

        pprogramNode1 = new AProgramProgram(pstmtsNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AStatementsStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmts pstmtsNode1;
        {
            // Block
        PStmt pstmtNode2;
        TNewline tnewlineNode3;
        PStmts pstmtsNode4;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        tnewlineNode3 = (TNewline)nodeArrayList2.get(0);
        pstmtsNode4 = (PStmts)nodeArrayList3.get(0);

        pstmtsNode1 = new AStatementsStmts(pstmtNode2, tnewlineNode3, pstmtsNode4);
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmts pstmtsNode1;
        {
            // Block

        pstmtsNode1 = new AStmts();
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AImportStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PImportT pimporttNode2;
        pimporttNode2 = (PImportT)nodeArrayList1.get(0);

        pstmtNode1 = new AImportStmtStmt(pimporttNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclarationStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TType ttypeNode2;
        TId tidNode3;
        TOpAssign topassignNode4;
        PExpr pexprNode5;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        topassignNode4 = (TOpAssign)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        pstmtNode1 = new ADeclarationStmt(ttypeNode2, tidNode3, topassignNode4, pexprNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAssignmentStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstmtNode1 = new AAssignmentStatementStmt(passignmentNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AForLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwFor tkwforNode2;
        TId tidNode3;
        TKwIn tkwinNode4;
        PVal pvalNode5;
        PBlock pblockNode6;
        tkwforNode2 = (TKwFor)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tkwinNode4 = (TKwIn)nodeArrayList3.get(0);
        pvalNode5 = (PVal)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pstmtNode1 = new AForLoopStmt(tkwforNode2, tidNode3, tkwinNode4, pvalNode5, pblockNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AWhileLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwWhile tkwwhileNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        tkwwhileNode2 = (TKwWhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pstmtNode1 = new AWhileLoopStmt(tkwwhileNode2, pexprNode3, pblockNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AControlStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        PInControlStmt pincontrolstmtNode5;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        pincontrolstmtNode5 = (PInControlStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AControlStatementStmt(tkwifNode2, pexprNode3, pblockNode4, pincontrolstmtNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ABlockStmtBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLCbrack tlcbrackNode2;
        PStmts pstmtsNode3;
        TRCbrack trcbrackNode4;
        tlcbrackNode2 = (TLCbrack)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        trcbrackNode4 = (TRCbrack)nodeArrayList3.get(0);

        pblockNode1 = new ABlockStmtBlock(tlcbrackNode2, pstmtsNode3, trcbrackNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AElifStatementInControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInControlStmt pincontrolstmtNode1;
        {
            // Block
        TKwElse tkwelseNode2;
        TKwIf tkwifNode3;
        PExpr pexprNode4;
        PBlock pblockNode5;
        tkwelseNode2 = (TKwElse)nodeArrayList1.get(0);
        tkwifNode3 = (TKwIf)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pincontrolstmtNode1 = new AElifStatementInControlStmt(tkwelseNode2, tkwifNode3, pexprNode4, pblockNode5);
        }
	nodeList.add(pincontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AElseStatementInControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInControlStmt pincontrolstmtNode1;
        {
            // Block
        PElseStatement pelsestatementNode2;
        pelsestatementNode2 = (PElseStatement)nodeArrayList1.get(0);

        pincontrolstmtNode1 = new AElseStatementInControlStmt(pelsestatementNode2);
        }
	nodeList.add(pincontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AElseBlockStatementElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TKwElse tkwelseNode2;
        PBlock pblockNode3;
        tkwelseNode2 = (TKwElse)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pelsestatementNode1 = new AElseBlockStatementElseStatement(tkwelseNode2, pblockNode3);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PElseStatement pelsestatementNode1;
        {
            // Block

        pelsestatementNode1 = new AElseStatement();
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAssignAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TId tidNode2;
        TOpAssign topassignNode3;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        topassignNode3 = (TOpAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        passignmentNode1 = new AAssignAssignment(tidNode2, topassignNode3, pexprNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAexprvalprimeexpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PVal pvalNode3;
        PExprPrime pexprprimeNode4;
        pvalNode3 = (PVal)nodeArrayList1.get(0);
        pexprprimeNode4 = (PExprPrime)nodeArrayList2.get(0);

        pexprNode1 = new AExprValPrimeExpr(null, pvalNode3, pexprprimeNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAexprvalprimeexpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TBopNot tbopnotNode2;
        PVal pvalNode3;
        PExprPrime pexprprimeNode4;
        tbopnotNode2 = (TBopNot)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        pexprprimeNode4 = (PExprPrime)nodeArrayList3.get(0);

        pexprNode1 = new AExprValPrimeExpr(tbopnotNode2, pvalNode3, pexprprimeNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExprSpecialExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PSpecialExpr pspecialexprNode2;
        pspecialexprNode2 = (PSpecialExpr)nodeArrayList1.get(0);

        pexprNode1 = new AExprSpecialExpr(pspecialexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExprPrimeOperatorValPrimeExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprPrime pexprprimeNode1;
        {
            // Block
        PBinInfixOp pbininfixopNode2;
        PVal pvalNode3;
        PExprPrime pexprprimeNode4;
        pbininfixopNode2 = (PBinInfixOp)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        pexprprimeNode4 = (PExprPrime)nodeArrayList3.get(0);

        pexprprimeNode1 = new AExprPrimeOperatorValPrimeExprPrime(pbininfixopNode2, pvalNode3, pexprprimeNode4);
        }
	nodeList.add(pexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExprPrime pexprprimeNode1;
        {
            // Block

        pexprprimeNode1 = new AExprPrime();
        }
	nodeList.add(pexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASpeicalExpressionSpecialExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialExpr pspecialexprNode1;
        {
            // Block
        PSpecialOp pspecialopNode2;
        PSpecialExprPrime pspecialexprprimeNode3;
        pspecialopNode2 = (PSpecialOp)nodeArrayList1.get(0);
        pspecialexprprimeNode3 = (PSpecialExprPrime)nodeArrayList2.get(0);

        pspecialexprNode1 = new ASpeicalExpressionSpecialExpr(pspecialopNode2, pspecialexprprimeNode3);
        }
	nodeList.add(pspecialexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASpecialExpressionSortSpecialExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialExpr pspecialexprNode1;
        {
            // Block
        TSopSort tsopsortNode2;
        PSpecialExprPrime pspecialexprprimeNode3;
        TKwSortOrder tkwsortorderNode4;
        tsopsortNode2 = (TSopSort)nodeArrayList1.get(0);
        pspecialexprprimeNode3 = (PSpecialExprPrime)nodeArrayList2.get(0);
        tkwsortorderNode4 = (TKwSortOrder)nodeArrayList3.get(0);

        pspecialexprNode1 = new ASpecialExpressionSortSpecialExpr(tsopsortNode2, pspecialexprprimeNode3, tkwsortorderNode4);
        }
	nodeList.add(pspecialexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASpecialExprPrimeSpecialExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialExprPrime pspecialexprprimeNode1;
        {
            // Block
        PSpecialOp pspecialopNode2;
        PSpecialExprPrime pspecialexprprimeNode3;
        pspecialopNode2 = (PSpecialOp)nodeArrayList1.get(0);
        pspecialexprprimeNode3 = (PSpecialExprPrime)nodeArrayList2.get(0);

        pspecialexprprimeNode1 = new ASpecialExprPrimeSpecialExprPrime(pspecialopNode2, pspecialexprprimeNode3);
        }
	nodeList.add(pspecialexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASpecialExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSpecialExprPrime pspecialexprprimeNode1;
        {
            // Block

        pspecialexprprimeNode1 = new ASpecialExprPrime();
        }
	nodeList.add(pspecialexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AValIdVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvalNode1 = new AValIdVal(tidNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AValFloatnumVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TFloatnum tfloatnumNode2;
        tfloatnumNode2 = (TFloatnum)nodeArrayList1.get(0);

        pvalNode1 = new AValFloatnumVal(tfloatnumNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AValIntnumVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TIntnum tintnumNode2;
        tintnumNode2 = (TIntnum)nodeArrayList1.get(0);

        pvalNode1 = new AValIntnumVal(tintnumNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AValStringVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalNode1 = new AValStringVal(tstringNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AValBoolVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        pvalNode1 = new AValBoolVal(tboolNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce APlusInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpPlus topplusNode2;
        topplusNode2 = (TOpPlus)nodeArrayList1.get(0);

        pbininfixopNode1 = new APlusInfixBinInfixOp(topplusNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AMinusInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpMinus topminusNode2;
        topminusNode2 = (TOpMinus)nodeArrayList1.get(0);

        pbininfixopNode1 = new AMinusInfixBinInfixOp(topminusNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMultiplicationInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpMult topmultNode2;
        topmultNode2 = (TOpMult)nodeArrayList1.get(0);

        pbininfixopNode1 = new AMultiplicationInfixBinInfixOp(topmultNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ADivisionInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpDiv topdivNode2;
        topdivNode2 = (TOpDiv)nodeArrayList1.get(0);

        pbininfixopNode1 = new ADivisionInfixBinInfixOp(topdivNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AModuloInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TOpMod topmodNode2;
        topmodNode2 = (TOpMod)nodeArrayList1.get(0);

        pbininfixopNode1 = new AModuloInfixBinInfixOp(topmodNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAndInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopAnd tbopandNode2;
        tbopandNode2 = (TBopAnd)nodeArrayList1.get(0);

        pbininfixopNode1 = new AAndInfixBinInfixOp(tbopandNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AOrInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopOr tboporNode2;
        tboporNode2 = (TBopOr)nodeArrayList1.get(0);

        pbininfixopNode1 = new AOrInfixBinInfixOp(tboporNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEqualityInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopEq tbopeqNode2;
        tbopeqNode2 = (TBopEq)nodeArrayList1.get(0);

        pbininfixopNode1 = new AEqualityInfixBinInfixOp(tbopeqNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AGreaterThanInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopGthan tbopgthanNode2;
        tbopgthanNode2 = (TBopGthan)nodeArrayList1.get(0);

        pbininfixopNode1 = new AGreaterThanInfixBinInfixOp(tbopgthanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AGreaterThanEqualInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopGethan tbopgethanNode2;
        tbopgethanNode2 = (TBopGethan)nodeArrayList1.get(0);

        pbininfixopNode1 = new AGreaterThanEqualInfixBinInfixOp(tbopgethanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALessThanInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopLthan tboplthanNode2;
        tboplthanNode2 = (TBopLthan)nodeArrayList1.get(0);

        pbininfixopNode1 = new ALessThanInfixBinInfixOp(tboplthanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ALessThanEqualInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TBopLethan tboplethanNode2;
        tboplethanNode2 = (TBopLethan)nodeArrayList1.get(0);

        pbininfixopNode1 = new ALessThanEqualInfixBinInfixOp(tboplethanNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AFilterOpSpecialOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialOp pspecialopNode1;
        {
            // Block
        TSopFilter tsopfilterNode2;
        tsopfilterNode2 = (TSopFilter)nodeArrayList1.get(0);

        pspecialopNode1 = new AFilterOpSpecialOp(tsopfilterNode2);
        }
	nodeList.add(pspecialopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AGroupbyOpSpecialOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialOp pspecialopNode1;
        {
            // Block
        TSopGroupby tsopgroupbyNode2;
        tsopgroupbyNode2 = (TSopGroupby)nodeArrayList1.get(0);

        pspecialopNode1 = new AGroupbyOpSpecialOp(tsopgroupbyNode2);
        }
	nodeList.add(pspecialopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMeanOpSpecialOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialOp pspecialopNode1;
        {
            // Block
        TSopMean tsopmeanNode2;
        tsopmeanNode2 = (TSopMean)nodeArrayList1.get(0);

        pspecialopNode1 = new AMeanOpSpecialOp(tsopmeanNode2);
        }
	nodeList.add(pspecialopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ACountOpSpecialOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecialOp pspecialopNode1;
        {
            // Block
        TSopCount tsopcountNode2;
        tsopcountNode2 = (TSopCount)nodeArrayList1.get(0);

        pspecialopNode1 = new ACountOpSpecialOp(tsopcountNode2);
        }
	nodeList.add(pspecialopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AImportWithoutSeperatorImportT */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImportT pimporttNode1;
        {
            // Block
        TKwImport tkwimportNode2;
        TString tstringNode3;
        TKwAs tkwasNode4;
        TId tidNode5;
        tkwimportNode2 = (TKwImport)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tkwasNode4 = (TKwAs)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);

        pimporttNode1 = new AImportWithoutSeperatorImportT(tkwimportNode2, tstringNode3, tkwasNode4, tidNode5);
        }
	nodeList.add(pimporttNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AImportWithSeperatorImportT */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImportT pimporttNode1;
        {
            // Block
        TKwImport tkwimportNode2;
        TString tstringNode3;
        TKwSeparatedBy tkwseparatedbyNode4;
        TChar tcharNode5;
        TKwAs tkwasNode6;
        TId tidNode7;
        tkwimportNode2 = (TKwImport)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tkwseparatedbyNode4 = (TKwSeparatedBy)nodeArrayList3.get(0);
        tcharNode5 = (TChar)nodeArrayList4.get(0);
        tkwasNode6 = (TKwAs)nodeArrayList5.get(0);
        tidNode7 = (TId)nodeArrayList6.get(0);

        pimporttNode1 = new AImportWithSeperatorImportT(tkwimportNode2, tstringNode3, tkwseparatedbyNode4, tcharNode5, tkwasNode6, tidNode7);
        }
	nodeList.add(pimporttNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, {11, SHIFT, 1}, {13, SHIFT, 2}, {36, SHIFT, 3}, {38, SHIFT, 4}, {39, SHIFT, 5}, {41, SHIFT, 6}, },
			{{-1, ERROR, 1}, {13, SHIFT, 12}, },
			{{-1, ERROR, 2}, {14, SHIFT, 13}, },
			{{-1, ERROR, 3}, {7, SHIFT, 14}, },
			{{-1, ERROR, 4}, {13, SHIFT, 15}, },
			{{-1, ERROR, 5}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, {27, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {33, SHIFT, 25}, {34, SHIFT, 26}, },
			{{-1, ERROR, 6}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, {27, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {33, SHIFT, 25}, {34, SHIFT, 26}, },
			{{-1, ERROR, 7}, {44, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 9}, {0, SHIFT, 32}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 12}, {14, SHIFT, 33}, },
			{{-1, ERROR, 13}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, {27, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {33, SHIFT, 25}, {34, SHIFT, 26}, },
			{{-1, ERROR, 14}, {35, SHIFT, 35}, {37, SHIFT, 36}, },
			{{-1, ERROR, 15}, {40, SHIFT, 37}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 21}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 23}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {34, SHIFT, 26}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 27}, {3, SHIFT, 41}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {18, SHIFT, 46}, {19, SHIFT, 47}, {20, SHIFT, 48}, {21, SHIFT, 49}, {22, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {25, SHIFT, 53}, {26, SHIFT, 54}, },
			{{-1, REDUCE, 23}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {34, SHIFT, 26}, },
			{{-1, ERROR, 31}, {3, SHIFT, 41}, },
			{{-1, REDUCE, 2}, {11, SHIFT, 1}, {13, SHIFT, 2}, {36, SHIFT, 3}, {38, SHIFT, 4}, {39, SHIFT, 5}, {41, SHIFT, 6}, },
			{{-1, ERROR, 33}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, {27, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {33, SHIFT, 25}, {34, SHIFT, 26}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 35}, {13, SHIFT, 61}, },
			{{-1, ERROR, 36}, {12, SHIFT, 62}, },
			{{-1, ERROR, 37}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, },
			{{-1, REDUCE, 19}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {18, SHIFT, 46}, {19, SHIFT, 47}, {20, SHIFT, 48}, {21, SHIFT, 49}, {22, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {25, SHIFT, 53}, {26, SHIFT, 54}, },
			{{-1, ERROR, 39}, {43, SHIFT, 65}, },
			{{-1, REDUCE, 23}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {34, SHIFT, 26}, },
			{{-1, REDUCE, 2}, {11, SHIFT, 1}, {13, SHIFT, 2}, {36, SHIFT, 3}, {38, SHIFT, 4}, {39, SHIFT, 5}, {41, SHIFT, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 56}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 13}, {42, SHIFT, 69}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 62}, {35, SHIFT, 72}, },
			{{-1, ERROR, 63}, {3, SHIFT, 41}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 67}, {4, SHIFT, 74}, },
			{{-1, REDUCE, 19}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {18, SHIFT, 46}, {19, SHIFT, 47}, {20, SHIFT, 48}, {21, SHIFT, 49}, {22, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {25, SHIFT, 53}, {26, SHIFT, 54}, },
			{{-1, ERROR, 69}, {3, SHIFT, 41}, {41, SHIFT, 76}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 72}, {13, SHIFT, 78}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 76}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {13, SHIFT, 20}, {27, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, {33, SHIFT, 25}, {34, SHIFT, 26}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 79}, {3, SHIFT, 41}, },
			{{-1, REDUCE, 10}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {32, 59}, {41, 67}, },
			{{-1, 9}, },
			{{-1, 42}, {31, 58}, {63, 73}, {69, 77}, {79, 80}, },
			{{-1, 70}, },
			{{-1, 71}, },
			{{-1, 10}, },
			{{-1, 27}, {6, 31}, {13, 34}, {33, 60}, {76, 79}, },
			{{-1, 55}, {38, 64}, {68, 75}, },
			{{-1, 28}, },
			{{-1, 39}, {30, 57}, {40, 66}, },
			{{-1, 29}, {21, 38}, {37, 63}, {56, 68}, },
			{{-1, 56}, },
			{{-1, 30}, {25, 40}, {30, 40}, {40, 40}, },
			{{-1, 11}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: type, id, 'import', 'for', 'while', 'if', EOF",
			"expecting: id",
			"expecting: ':='",
			"expecting: string",
			"expecting: string, intnum, floatnum, bool, id, 'not', 'filter', 'groupby', 'mean', 'sort', 'count'",
			"expecting: EOF",
			"expecting: newline",
			"expecting: 'as', 'seperated_by'",
			"expecting: 'in'",
			"expecting: newline, '{', '+', '-', '*', '/', '%', '<', '<=', '>', '>=', '==', 'and', 'or'",
			"expecting: string, intnum, floatnum, bool, id",
			"expecting: newline, '{', 'filter', 'groupby', 'mean', 'count', kw sort order",
			"expecting: 'filter', 'groupby', 'mean', 'count', kw sort order",
			"expecting: '{'",
			"expecting: newline, '{'",
			"expecting: newline, '{', 'filter', 'groupby', 'mean', 'count'",
			"expecting: '}', type, id, 'import', 'for', 'while', 'if', EOF",
			"expecting: char",
			"expecting: kw sort order",
			"expecting: '}', type, id, 'import', 'for', 'while', 'if'",
			"expecting: newline, 'else'",
			"expecting: '}', EOF",
			"expecting: 'as'",
			"expecting: newline, '{', kw sort order",
			"expecting: '}'",
			"expecting: '{', 'if'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 1, 4, 4, 5, 5, 6, 6, 6, 2, 4, 7, 8, 9, 9, 9, 9, 9, 10, 11, 11, 11, 12, 11, 13, 14, 9, 15, 13, 16, 4, 6, 1, 17, 10, 9, 18, 11, 19, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 14, 20, 21, 6, 6, 22, 13, 14, 14, 23, 24, 9, 25, 6, 6, 1, 6, 20, 14, 4, 6, 6, 13, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
