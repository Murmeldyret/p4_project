/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.parser;

import postfix.lexer.*;
import postfix.node.*;
import postfix.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AStatementsStmts */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AStmts */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AImportStmtStmt */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ADeclarationStmt */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAssigenmentStatementStmt */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AWhileLoopStmt */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AForLoopStmt */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AControlStatementStmt */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce ABlockStmtBlock */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AElifStatementInControlStmt */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AElseStatementInControlStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AElseBlockStatementElseStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AElseStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AAssignAssigenment */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AExprValPrimeExpr */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AExpr */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AExprPrimeOperatorValPrimeExprPrime */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AExprPrime */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AValIdVal */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AValFloatnumVal */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AValIntnumVal */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce AValStringVal */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list, false);
            }
            break;
            case 23: /* reduce AValBoolVal */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
            case 24: /* reduce APlusInfixBinInfixOp */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce AMinusInfixBinInfixOp */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list, false);
            }
            break;
            case 26: /* reduce AMultiplicationInfixBinInfixOp */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list, false);
            }
            break;
            case 27: /* reduce ADivisionInfixBinInfixOp */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce AModuloInfixBinInfixOp */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list, false);
            }
            break;
            case 29: /* reduce AImportWithoutSeperatorImportT */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list, false);
            }
            break;
            case 30: /* reduce AImportWithSeperatorImportT */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStmts pstmtsNode2;
        pstmtsNode2 = (PStmts)nodeArrayList1.get(0);

        pprogramNode1 = new AProgramProgram(pstmtsNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AStatementsStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmts pstmtsNode1;
        {
            // Block
        PStmt pstmtNode2;
        TNewline tnewlineNode3;
        PStmts pstmtsNode4;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        tnewlineNode3 = (TNewline)nodeArrayList2.get(0);
        pstmtsNode4 = (PStmts)nodeArrayList3.get(0);

        pstmtsNode1 = new AStatementsStmts(pstmtNode2, tnewlineNode3, pstmtsNode4);
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmts pstmtsNode1;
        {
            // Block

        pstmtsNode1 = new AStmts();
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AImportStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PImportT pimporttNode2;
        pimporttNode2 = (PImportT)nodeArrayList1.get(0);

        pstmtNode1 = new AImportStmtStmt(pimporttNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclarationStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TType ttypeNode2;
        TId tidNode3;
        TAssign tassignNode4;
        PExpr pexprNode5;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        pstmtNode1 = new ADeclarationStmt(ttypeNode2, tidNode3, tassignNode4, pexprNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAssigenmentStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PAssigenment passigenmentNode2;
        passigenmentNode2 = (PAssigenment)nodeArrayList1.get(0);

        pstmtNode1 = new AAssigenmentStatementStmt(passigenmentNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AWhileLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        pstmtNode1 = new AWhileLoopStmt(twhileNode2, pexprNode3, pblockNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AForLoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TFor tforNode2;
        TId tidNode3;
        TIn tinNode4;
        PVal pvalNode5;
        PBlock pblockNode6;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinNode4 = (TIn)nodeArrayList3.get(0);
        pvalNode5 = (PVal)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pstmtNode1 = new AForLoopStmt(tforNode2, tidNode3, tinNode4, pvalNode5, pblockNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AControlStatementStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        PBlock pblockNode4;
        PInControlStmt pincontrolstmtNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);
        pincontrolstmtNode5 = (PInControlStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AControlStatementStmt(tifNode2, pexprNode3, pblockNode4, pincontrolstmtNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ABlockStmtBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrack tlbrackNode2;
        PStmts pstmtsNode3;
        TRBrack trbrackNode4;
        tlbrackNode2 = (TLBrack)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        trbrackNode4 = (TRBrack)nodeArrayList3.get(0);

        pblockNode1 = new ABlockStmtBlock(tlbrackNode2, pstmtsNode3, trbrackNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AElifStatementInControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInControlStmt pincontrolstmtNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        PExpr pexprNode4;
        PBlock pblockNode5;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pincontrolstmtNode1 = new AElifStatementInControlStmt(telseNode2, tifNode3, pexprNode4, pblockNode5);
        }
	nodeList.add(pincontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AElseStatementInControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInControlStmt pincontrolstmtNode1;
        {
            // Block
        PElseStatement pelsestatementNode2;
        pelsestatementNode2 = (PElseStatement)nodeArrayList1.get(0);

        pincontrolstmtNode1 = new AElseStatementInControlStmt(pelsestatementNode2);
        }
	nodeList.add(pincontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AElseBlockStatementElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TElse telseNode2;
        PBlock pblockNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pelsestatementNode1 = new AElseBlockStatementElseStatement(telseNode2, pblockNode3);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PElseStatement pelsestatementNode1;
        {
            // Block

        pelsestatementNode1 = new AElseStatement();
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAssignAssigenment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssigenment passigenmentNode1;
        {
            // Block
        TId tidNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        passigenmentNode1 = new AAssignAssigenment(tidNode2, tassignNode3, pexprNode4);
        }
	nodeList.add(passigenmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AExprValPrimeExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PVal pvalNode2;
        PExprPrime pexprprimeNode3;
        pvalNode2 = (PVal)nodeArrayList1.get(0);
        pexprprimeNode3 = (PExprPrime)nodeArrayList2.get(0);

        pexprNode1 = new AExprValPrimeExpr(pvalNode2, pexprprimeNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExpr pexprNode1;
        {
            // Block

        pexprNode1 = new AExpr();
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExprPrimeOperatorValPrimeExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprPrime pexprprimeNode1;
        {
            // Block
        PBinInfixOp pbininfixopNode2;
        PVal pvalNode3;
        PExprPrime pexprprimeNode4;
        pbininfixopNode2 = (PBinInfixOp)nodeArrayList1.get(0);
        pvalNode3 = (PVal)nodeArrayList2.get(0);
        pexprprimeNode4 = (PExprPrime)nodeArrayList3.get(0);

        pexprprimeNode1 = new AExprPrimeOperatorValPrimeExprPrime(pbininfixopNode2, pvalNode3, pexprprimeNode4);
        }
	nodeList.add(pexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExprPrime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExprPrime pexprprimeNode1;
        {
            // Block

        pexprprimeNode1 = new AExprPrime();
        }
	nodeList.add(pexprprimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AValIdVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvalNode1 = new AValIdVal(tidNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AValFloatnumVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TFloatnum tfloatnumNode2;
        tfloatnumNode2 = (TFloatnum)nodeArrayList1.get(0);

        pvalNode1 = new AValFloatnumVal(tfloatnumNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AValIntnumVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TIntnum tintnumNode2;
        tintnumNode2 = (TIntnum)nodeArrayList1.get(0);

        pvalNode1 = new AValIntnumVal(tintnumNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AValStringVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalNode1 = new AValStringVal(tstringNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AValBoolVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        pvalNode1 = new AValBoolVal(tboolNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APlusInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pbininfixopNode1 = new APlusInfixBinInfixOp(tplusNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMinusInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pbininfixopNode1 = new AMinusInfixBinInfixOp(tminusNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMultiplicationInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pbininfixopNode1 = new AMultiplicationInfixBinInfixOp(tmultNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ADivisionInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pbininfixopNode1 = new ADivisionInfixBinInfixOp(tdivNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AModuloInfixBinInfixOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinInfixOp pbininfixopNode1;
        {
            // Block
        TMod tmodNode2;
        tmodNode2 = (TMod)nodeArrayList1.get(0);

        pbininfixopNode1 = new AModuloInfixBinInfixOp(tmodNode2);
        }
	nodeList.add(pbininfixopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AImportWithoutSeperatorImportT */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImportT pimporttNode1;
        {
            // Block
        TImport timportNode2;
        TString tstringNode3;
        TAs tasNode4;
        TId tidNode5;
        timportNode2 = (TImport)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tasNode4 = (TAs)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);

        pimporttNode1 = new AImportWithoutSeperatorImportT(timportNode2, tstringNode3, tasNode4, tidNode5);
        }
	nodeList.add(pimporttNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AImportWithSeperatorImportT */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImportT pimporttNode1;
        {
            // Block
        TImport timportNode2;
        TString tstringNode3;
        TSeperatedBy tseperatedbyNode4;
        TChar tcharNode5;
        TAs tasNode6;
        TId tidNode7;
        timportNode2 = (TImport)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tseperatedbyNode4 = (TSeperatedBy)nodeArrayList3.get(0);
        tcharNode5 = (TChar)nodeArrayList4.get(0);
        tasNode6 = (TAs)nodeArrayList5.get(0);
        tidNode7 = (TId)nodeArrayList6.get(0);

        pimporttNode1 = new AImportWithSeperatorImportT(timportNode2, tstringNode3, tseperatedbyNode4, tcharNode5, tasNode6, tidNode7);
        }
	nodeList.add(pimporttNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, {4, SHIFT, 1}, {8, SHIFT, 2}, {13, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, ERROR, 1}, {5, SHIFT, 12}, },
			{{-1, ERROR, 2}, {12, SHIFT, 13}, },
			{{-1, ERROR, 3}, {8, SHIFT, 14}, },
			{{-1, ERROR, 4}, {8, SHIFT, 15}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 7}, {26, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 9}, {11, SHIFT, 24}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 12}, {7, SHIFT, 25}, {9, SHIFT, 26}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 14}, {12, SHIFT, 28}, },
			{{-1, ERROR, 15}, {21, SHIFT, 29}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 21}, {2, SHIFT, 30}, },
			{{-1, REDUCE, 18}, {14, SHIFT, 32}, {15, SHIFT, 33}, {16, SHIFT, 34}, {17, SHIFT, 35}, {18, SHIFT, 36}, },
			{{-1, ERROR, 23}, {2, SHIFT, 30}, },
			{{-1, REDUCE, 2}, {4, SHIFT, 1}, {8, SHIFT, 2}, {13, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, ERROR, 25}, {8, SHIFT, 41}, },
			{{-1, ERROR, 26}, {10, SHIFT, 42}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 29}, {5, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 2}, {4, SHIFT, 1}, {8, SHIFT, 2}, {13, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 38}, {5, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 13}, {23, SHIFT, 47}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 42}, {7, SHIFT, 50}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 44}, {2, SHIFT, 30}, },
			{{-1, ERROR, 45}, {3, SHIFT, 52}, },
			{{-1, REDUCE, 18}, {14, SHIFT, 32}, {15, SHIFT, 33}, {16, SHIFT, 34}, {17, SHIFT, 35}, {18, SHIFT, 36}, },
			{{-1, ERROR, 47}, {2, SHIFT, 30}, {22, SHIFT, 54}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 50}, {8, SHIFT, 56}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, {5, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 57}, {2, SHIFT, 30}, },
			{{-1, REDUCE, 10}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {24, 40}, {30, 45}, },
			{{-1, 9}, },
			{{-1, 31}, {23, 39}, {44, 51}, {47, 55}, {57, 58}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 10}, },
			{{-1, 21}, {6, 23}, {13, 27}, {28, 43}, {54, 57}, },
			{{-1, 37}, {46, 53}, },
			{{-1, 22}, {29, 44}, {38, 46}, },
			{{-1, 38}, },
			{{-1, 11}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'import', id, type, 'for', 'while', 'if', EOF",
			"expecting: string",
			"expecting: ':='",
			"expecting: id",
			"expecting: '{', string, bool, id, intnum, floatnum",
			"expecting: EOF",
			"expecting: newline",
			"expecting: 'as', 'seperated_by'",
			"expecting: string, bool, id, newline, intnum, floatnum",
			"expecting: 'in'",
			"expecting: '{', newline, '+', '-', '*', '/', '%'",
			"expecting: '{'",
			"expecting: '}', 'import', id, type, 'for', 'while', 'if', EOF",
			"expecting: char",
			"expecting: string, bool, id, intnum, floatnum",
			"expecting: '}', 'import', id, type, 'for', 'while', 'if'",
			"expecting: '{', newline",
			"expecting: newline, 'else'",
			"expecting: '}', EOF",
			"expecting: 'as'",
			"expecting: '}'",
			"expecting: '{', 'if'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8, 2, 9, 10, 10, 10, 10, 10, 11, 10, 11, 12, 3, 13, 6, 8, 14, 15, 6, 14, 14, 14, 14, 14, 16, 14, 17, 18, 6, 19, 6, 11, 20, 10, 21, 6, 6, 3, 6, 17, 16, 4, 6, 6, 11, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
