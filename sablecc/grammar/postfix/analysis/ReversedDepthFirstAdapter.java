/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import java.util.*;
import postfix.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgramProgram(AProgramProgram node)
    {
        defaultIn(node);
    }

    public void outAProgramProgram(AProgramProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramProgram(AProgramProgram node)
    {
        inAProgramProgram(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        outAProgramProgram(node);
    }

    public void inAStatementsStmts(AStatementsStmts node)
    {
        defaultIn(node);
    }

    public void outAStatementsStmts(AStatementsStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementsStmts(AStatementsStmts node)
    {
        inAStatementsStmts(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAStatementsStmts(node);
    }

    public void inAStmts(AStmts node)
    {
        defaultIn(node);
    }

    public void outAStmts(AStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmts(AStmts node)
    {
        inAStmts(node);
        outAStmts(node);
    }

    public void inAImportStmtStmt(AImportStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAImportStmtStmt(AImportStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportStmtStmt(AImportStmtStmt node)
    {
        inAImportStmtStmt(node);
        if(node.getImportT() != null)
        {
            node.getImportT().apply(this);
        }
        outAImportStmtStmt(node);
    }

    public void inADeclarationStmt(ADeclarationStmt node)
    {
        defaultIn(node);
    }

    public void outADeclarationStmt(ADeclarationStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationStmt(ADeclarationStmt node)
    {
        inADeclarationStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADeclarationStmt(node);
    }

    public void inAAssigenmentStatementStmt(AAssigenmentStatementStmt node)
    {
        defaultIn(node);
    }

    public void outAAssigenmentStatementStmt(AAssigenmentStatementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssigenmentStatementStmt(AAssigenmentStatementStmt node)
    {
        inAAssigenmentStatementStmt(node);
        if(node.getAssigenment() != null)
        {
            node.getAssigenment().apply(this);
        }
        outAAssigenmentStatementStmt(node);
    }

    public void inAWhileLoopStmt(AWhileLoopStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileLoopStmt(AWhileLoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileLoopStmt(AWhileLoopStmt node)
    {
        inAWhileLoopStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileLoopStmt(node);
    }

    public void inAForLoopStmt(AForLoopStmt node)
    {
        defaultIn(node);
    }

    public void outAForLoopStmt(AForLoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForLoopStmt(AForLoopStmt node)
    {
        inAForLoopStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForLoopStmt(node);
    }

    public void inAControlStatementStmt(AControlStatementStmt node)
    {
        defaultIn(node);
    }

    public void outAControlStatementStmt(AControlStatementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAControlStatementStmt(AControlStatementStmt node)
    {
        inAControlStatementStmt(node);
        if(node.getInControlStmt() != null)
        {
            node.getInControlStmt().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAControlStatementStmt(node);
    }

    public void inABlockStmtBlock(ABlockStmtBlock node)
    {
        defaultIn(node);
    }

    public void outABlockStmtBlock(ABlockStmtBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtBlock(ABlockStmtBlock node)
    {
        inABlockStmtBlock(node);
        if(node.getRBrack() != null)
        {
            node.getRBrack().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getLBrack() != null)
        {
            node.getLBrack().apply(this);
        }
        outABlockStmtBlock(node);
    }

    public void inAElifStatementInControlStmt(AElifStatementInControlStmt node)
    {
        defaultIn(node);
    }

    public void outAElifStatementInControlStmt(AElifStatementInControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElifStatementInControlStmt(AElifStatementInControlStmt node)
    {
        inAElifStatementInControlStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElifStatementInControlStmt(node);
    }

    public void inAElseStatementInControlStmt(AElseStatementInControlStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStatementInControlStmt(AElseStatementInControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatementInControlStmt(AElseStatementInControlStmt node)
    {
        inAElseStatementInControlStmt(node);
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        outAElseStatementInControlStmt(node);
    }

    public void inAElseBlockStatementElseStatement(AElseBlockStatementElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseBlockStatementElseStatement(AElseBlockStatementElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseBlockStatementElseStatement(AElseBlockStatementElseStatement node)
    {
        inAElseBlockStatementElseStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseBlockStatementElseStatement(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        outAElseStatement(node);
    }

    public void inAAssignAssigenment(AAssignAssigenment node)
    {
        defaultIn(node);
    }

    public void outAAssignAssigenment(AAssignAssigenment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssigenment(AAssignAssigenment node)
    {
        inAAssignAssigenment(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignAssigenment(node);
    }

    public void inAExprValPrimeExpr(AExprValPrimeExpr node)
    {
        defaultIn(node);
    }

    public void outAExprValPrimeExpr(AExprValPrimeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprValPrimeExpr(AExprValPrimeExpr node)
    {
        inAExprValPrimeExpr(node);
        if(node.getExprPrime() != null)
        {
            node.getExprPrime().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outAExprValPrimeExpr(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        outAExpr(node);
    }

    public void inAExprPrimeOperatorValPrimeExprPrime(AExprPrimeOperatorValPrimeExprPrime node)
    {
        defaultIn(node);
    }

    public void outAExprPrimeOperatorValPrimeExprPrime(AExprPrimeOperatorValPrimeExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPrimeOperatorValPrimeExprPrime(AExprPrimeOperatorValPrimeExprPrime node)
    {
        inAExprPrimeOperatorValPrimeExprPrime(node);
        if(node.getExprPrime() != null)
        {
            node.getExprPrime().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getBinInfixOp() != null)
        {
            node.getBinInfixOp().apply(this);
        }
        outAExprPrimeOperatorValPrimeExprPrime(node);
    }

    public void inAExprPrime(AExprPrime node)
    {
        defaultIn(node);
    }

    public void outAExprPrime(AExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPrime(AExprPrime node)
    {
        inAExprPrime(node);
        outAExprPrime(node);
    }

    public void inAValIdVal(AValIdVal node)
    {
        defaultIn(node);
    }

    public void outAValIdVal(AValIdVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValIdVal(AValIdVal node)
    {
        inAValIdVal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAValIdVal(node);
    }

    public void inAValFloatnumVal(AValFloatnumVal node)
    {
        defaultIn(node);
    }

    public void outAValFloatnumVal(AValFloatnumVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValFloatnumVal(AValFloatnumVal node)
    {
        inAValFloatnumVal(node);
        if(node.getFloatnum() != null)
        {
            node.getFloatnum().apply(this);
        }
        outAValFloatnumVal(node);
    }

    public void inAValIntnumVal(AValIntnumVal node)
    {
        defaultIn(node);
    }

    public void outAValIntnumVal(AValIntnumVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValIntnumVal(AValIntnumVal node)
    {
        inAValIntnumVal(node);
        if(node.getIntnum() != null)
        {
            node.getIntnum().apply(this);
        }
        outAValIntnumVal(node);
    }

    public void inAValStringVal(AValStringVal node)
    {
        defaultIn(node);
    }

    public void outAValStringVal(AValStringVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValStringVal(AValStringVal node)
    {
        inAValStringVal(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAValStringVal(node);
    }

    public void inAValBoolVal(AValBoolVal node)
    {
        defaultIn(node);
    }

    public void outAValBoolVal(AValBoolVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValBoolVal(AValBoolVal node)
    {
        inAValBoolVal(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outAValBoolVal(node);
    }

    public void inAImportWithoutSeperatorImportT(AImportWithoutSeperatorImportT node)
    {
        defaultIn(node);
    }

    public void outAImportWithoutSeperatorImportT(AImportWithoutSeperatorImportT node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportWithoutSeperatorImportT(AImportWithoutSeperatorImportT node)
    {
        inAImportWithoutSeperatorImportT(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outAImportWithoutSeperatorImportT(node);
    }

    public void inAImportWithSeperatorImportT(AImportWithSeperatorImportT node)
    {
        defaultIn(node);
    }

    public void outAImportWithSeperatorImportT(AImportWithSeperatorImportT node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportWithSeperatorImportT(AImportWithSeperatorImportT node)
    {
        inAImportWithSeperatorImportT(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        if(node.getSeperatedBy() != null)
        {
            node.getSeperatedBy().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outAImportWithSeperatorImportT(node);
    }
}
