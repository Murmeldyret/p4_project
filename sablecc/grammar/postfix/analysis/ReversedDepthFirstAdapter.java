/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import java.util.*;
import postfix.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgramProgram(AProgramProgram node)
    {
        defaultIn(node);
    }

    public void outAProgramProgram(AProgramProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramProgram(AProgramProgram node)
    {
        inAProgramProgram(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        outAProgramProgram(node);
    }

    public void inAStatementsStmts(AStatementsStmts node)
    {
        defaultIn(node);
    }

    public void outAStatementsStmts(AStatementsStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementsStmts(AStatementsStmts node)
    {
        inAStatementsStmts(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAStatementsStmts(node);
    }

    public void inAStmts(AStmts node)
    {
        defaultIn(node);
    }

    public void outAStmts(AStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmts(AStmts node)
    {
        inAStmts(node);
        outAStmts(node);
    }

    public void inAImportWithoutSeperatorStmt(AImportWithoutSeperatorStmt node)
    {
        defaultIn(node);
    }

    public void outAImportWithoutSeperatorStmt(AImportWithoutSeperatorStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportWithoutSeperatorStmt(AImportWithoutSeperatorStmt node)
    {
        inAImportWithoutSeperatorStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwAs() != null)
        {
            node.getKwAs().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwImport() != null)
        {
            node.getKwImport().apply(this);
        }
        outAImportWithoutSeperatorStmt(node);
    }

    public void inAImportWithSeperatorStmt(AImportWithSeperatorStmt node)
    {
        defaultIn(node);
    }

    public void outAImportWithSeperatorStmt(AImportWithSeperatorStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportWithSeperatorStmt(AImportWithSeperatorStmt node)
    {
        inAImportWithSeperatorStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwAs() != null)
        {
            node.getKwAs().apply(this);
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        if(node.getKwSeparatedBy() != null)
        {
            node.getKwSeparatedBy().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwImport() != null)
        {
            node.getKwImport().apply(this);
        }
        outAImportWithSeperatorStmt(node);
    }

    public void inADeclarationStmt(ADeclarationStmt node)
    {
        defaultIn(node);
    }

    public void outADeclarationStmt(ADeclarationStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationStmt(ADeclarationStmt node)
    {
        inADeclarationStmt(node);
        if(node.getDcl() != null)
        {
            node.getDcl().apply(this);
        }
        outADeclarationStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOpAssign() != null)
        {
            node.getOpAssign().apply(this);
        }
        if(node.getIndexing() != null)
        {
            node.getIndexing().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAFunctionCallStmt(AFunctionCallStmt node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStmt(AFunctionCallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallStmt(AFunctionCallStmt node)
    {
        inAFunctionCallStmt(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStmt(node);
    }

    public void inAArrayOperationsStmt(AArrayOperationsStmt node)
    {
        defaultIn(node);
    }

    public void outAArrayOperationsStmt(AArrayOperationsStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayOperationsStmt(AArrayOperationsStmt node)
    {
        inAArrayOperationsStmt(node);
        if(node.getArrayOp() != null)
        {
            node.getArrayOp().apply(this);
        }
        outAArrayOperationsStmt(node);
    }

    public void inAForLoopStmt(AForLoopStmt node)
    {
        defaultIn(node);
    }

    public void outAForLoopStmt(AForLoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForLoopStmt(AForLoopStmt node)
    {
        inAForLoopStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getKwFor() != null)
        {
            node.getKwFor().apply(this);
        }
        outAForLoopStmt(node);
    }

    public void inAWhileLoopStmt(AWhileLoopStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileLoopStmt(AWhileLoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileLoopStmt(AWhileLoopStmt node)
    {
        inAWhileLoopStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwWhile() != null)
        {
            node.getKwWhile().apply(this);
        }
        outAWhileLoopStmt(node);
    }

    public void inAControlStatementStmt(AControlStatementStmt node)
    {
        defaultIn(node);
    }

    public void outAControlStatementStmt(AControlStatementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAControlStatementStmt(AControlStatementStmt node)
    {
        inAControlStatementStmt(node);
        if(node.getInControlStmt() != null)
        {
            node.getInControlStmt().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        outAControlStatementStmt(node);
    }

    public void inACsvOperationStmt(ACsvOperationStmt node)
    {
        defaultIn(node);
    }

    public void outACsvOperationStmt(ACsvOperationStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvOperationStmt(ACsvOperationStmt node)
    {
        inACsvOperationStmt(node);
        if(node.getCsvOp() != null)
        {
            node.getCsvOp().apply(this);
        }
        outACsvOperationStmt(node);
    }

    public void inAPrintStatementStmt(APrintStatementStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintStatementStmt(APrintStatementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStatementStmt(APrintStatementStmt node)
    {
        inAPrintStatementStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwPrint() != null)
        {
            node.getKwPrint().apply(this);
        }
        outAPrintStatementStmt(node);
    }

    public void inAExportStatementStmt(AExportStatementStmt node)
    {
        defaultIn(node);
    }

    public void outAExportStatementStmt(AExportStatementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExportStatementStmt(AExportStatementStmt node)
    {
        inAExportStatementStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwTo() != null)
        {
            node.getKwTo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwExport() != null)
        {
            node.getKwExport().apply(this);
        }
        outAExportStatementStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwReturn() != null)
        {
            node.getKwReturn().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inABreakStatementStmt(ABreakStatementStmt node)
    {
        defaultIn(node);
    }

    public void outABreakStatementStmt(ABreakStatementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatementStmt(ABreakStatementStmt node)
    {
        inABreakStatementStmt(node);
        if(node.getKwBreak() != null)
        {
            node.getKwBreak().apply(this);
        }
        outABreakStatementStmt(node);
    }

    public void inAVariableDeclarationInitializationDcl(AVariableDeclarationInitializationDcl node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationInitializationDcl(AVariableDeclarationInitializationDcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationInitializationDcl(AVariableDeclarationInitializationDcl node)
    {
        inAVariableDeclarationInitializationDcl(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOpAssign() != null)
        {
            node.getOpAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVariableDeclarationInitializationDcl(node);
    }

    public void inAVariableDeclarationArrayDcl(AVariableDeclarationArrayDcl node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationArrayDcl(AVariableDeclarationArrayDcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationArrayDcl(AVariableDeclarationArrayDcl node)
    {
        inAVariableDeclarationArrayDcl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwArray() != null)
        {
            node.getKwArray().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVariableDeclarationArrayDcl(node);
    }

    public void inAVariableDeclarationDcl(AVariableDeclarationDcl node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationDcl(AVariableDeclarationDcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationDcl(AVariableDeclarationDcl node)
    {
        inAVariableDeclarationDcl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVariableDeclarationDcl(node);
    }

    public void inAVariableDeclarationArrayInitDcl(AVariableDeclarationArrayInitDcl node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationArrayInitDcl(AVariableDeclarationArrayInitDcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationArrayInitDcl(AVariableDeclarationArrayInitDcl node)
    {
        inAVariableDeclarationArrayInitDcl(node);
        if(node.getArrayExpr() != null)
        {
            node.getArrayExpr().apply(this);
        }
        if(node.getOpAssign() != null)
        {
            node.getOpAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwArray() != null)
        {
            node.getKwArray().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVariableDeclarationArrayInitDcl(node);
    }

    public void inAConstDeclarationInitializationDcl(AConstDeclarationInitializationDcl node)
    {
        defaultIn(node);
    }

    public void outAConstDeclarationInitializationDcl(AConstDeclarationInitializationDcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclarationInitializationDcl(AConstDeclarationInitializationDcl node)
    {
        inAConstDeclarationInitializationDcl(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOpAssign() != null)
        {
            node.getOpAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getKwConst() != null)
        {
            node.getKwConst().apply(this);
        }
        outAConstDeclarationInitializationDcl(node);
    }

    public void inAFunctionDeclarationDcl(AFunctionDeclarationDcl node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclarationDcl(AFunctionDeclarationDcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclarationDcl(AFunctionDeclarationDcl node)
    {
        inAFunctionDeclarationDcl(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getFunctionParam() != null)
        {
            node.getFunctionParam().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwFunction() != null)
        {
            node.getKwFunction().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFunctionDeclarationDcl(node);
    }

    public void inAFunctionParamFunctionParam(AFunctionParamFunctionParam node)
    {
        defaultIn(node);
    }

    public void outAFunctionParamFunctionParam(AFunctionParamFunctionParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionParamFunctionParam(AFunctionParamFunctionParam node)
    {
        inAFunctionParamFunctionParam(node);
        if(node.getFunctionParamPrime() != null)
        {
            node.getFunctionParamPrime().apply(this);
        }
        if(node.getDcl() != null)
        {
            node.getDcl().apply(this);
        }
        outAFunctionParamFunctionParam(node);
    }

    public void inAFunctionParam(AFunctionParam node)
    {
        defaultIn(node);
    }

    public void outAFunctionParam(AFunctionParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionParam(AFunctionParam node)
    {
        inAFunctionParam(node);
        outAFunctionParam(node);
    }

    public void inAFunctionParamPrimeFunctionParamPrime(AFunctionParamPrimeFunctionParamPrime node)
    {
        defaultIn(node);
    }

    public void outAFunctionParamPrimeFunctionParamPrime(AFunctionParamPrimeFunctionParamPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionParamPrimeFunctionParamPrime(AFunctionParamPrimeFunctionParamPrime node)
    {
        inAFunctionParamPrimeFunctionParamPrime(node);
        if(node.getFunctionParamPrime() != null)
        {
            node.getFunctionParamPrime().apply(this);
        }
        if(node.getDcl() != null)
        {
            node.getDcl().apply(this);
        }
        if(node.getSopComma() != null)
        {
            node.getSopComma().apply(this);
        }
        outAFunctionParamPrimeFunctionParamPrime(node);
    }

    public void inAFunctionParamPrime(AFunctionParamPrime node)
    {
        defaultIn(node);
    }

    public void outAFunctionParamPrime(AFunctionParamPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionParamPrime(AFunctionParamPrime node)
    {
        inAFunctionParamPrime(node);
        outAFunctionParamPrime(node);
    }

    public void inAFunctionCallParamFunctionCallParam(AFunctionCallParamFunctionCallParam node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallParamFunctionCallParam(AFunctionCallParamFunctionCallParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallParamFunctionCallParam(AFunctionCallParamFunctionCallParam node)
    {
        inAFunctionCallParamFunctionCallParam(node);
        if(node.getFunctionCallParamPrime() != null)
        {
            node.getFunctionCallParamPrime().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAFunctionCallParamFunctionCallParam(node);
    }

    public void inAFunctionCallParam(AFunctionCallParam node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallParam(AFunctionCallParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallParam(AFunctionCallParam node)
    {
        inAFunctionCallParam(node);
        outAFunctionCallParam(node);
    }

    public void inAFunctionCallParamPrimeFunctionCallParamPrime(AFunctionCallParamPrimeFunctionCallParamPrime node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallParamPrimeFunctionCallParamPrime(AFunctionCallParamPrimeFunctionCallParamPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallParamPrimeFunctionCallParamPrime(AFunctionCallParamPrimeFunctionCallParamPrime node)
    {
        inAFunctionCallParamPrimeFunctionCallParamPrime(node);
        if(node.getFunctionCallParamPrime() != null)
        {
            node.getFunctionCallParamPrime().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopComma() != null)
        {
            node.getSopComma().apply(this);
        }
        outAFunctionCallParamPrimeFunctionCallParamPrime(node);
    }

    public void inAFunctionCallParamPrime(AFunctionCallParamPrime node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallParamPrime(AFunctionCallParamPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallParamPrime(AFunctionCallParamPrime node)
    {
        inAFunctionCallParamPrime(node);
        outAFunctionCallParamPrime(node);
    }

    public void inAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        inAFunctionCallFunctionCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFunctionCallParam() != null)
        {
            node.getFunctionCallParam().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallFunctionCall(node);
    }

    public void inABlockStmtBlock(ABlockStmtBlock node)
    {
        defaultIn(node);
    }

    public void outABlockStmtBlock(ABlockStmtBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtBlock(ABlockStmtBlock node)
    {
        inABlockStmtBlock(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        outABlockStmtBlock(node);
    }

    public void inAElifStatementInControlStmt(AElifStatementInControlStmt node)
    {
        defaultIn(node);
    }

    public void outAElifStatementInControlStmt(AElifStatementInControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElifStatementInControlStmt(AElifStatementInControlStmt node)
    {
        inAElifStatementInControlStmt(node);
        if(node.getInControlStmt() != null)
        {
            node.getInControlStmt().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        if(node.getKwElse() != null)
        {
            node.getKwElse().apply(this);
        }
        outAElifStatementInControlStmt(node);
    }

    public void inAElseStatementInControlStmt(AElseStatementInControlStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStatementInControlStmt(AElseStatementInControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatementInControlStmt(AElseStatementInControlStmt node)
    {
        inAElseStatementInControlStmt(node);
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        outAElseStatementInControlStmt(node);
    }

    public void inAElseBlockStatementElseStatement(AElseBlockStatementElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseBlockStatementElseStatement(AElseBlockStatementElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseBlockStatementElseStatement(AElseBlockStatementElseStatement node)
    {
        inAElseBlockStatementElseStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getKwElse() != null)
        {
            node.getKwElse().apply(this);
        }
        outAElseBlockStatementElseStatement(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        outAElseStatement(node);
    }

    public void inAExprValPrimeExpr(AExprValPrimeExpr node)
    {
        defaultIn(node);
    }

    public void outAExprValPrimeExpr(AExprValPrimeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprValPrimeExpr(AExprValPrimeExpr node)
    {
        inAExprValPrimeExpr(node);
        if(node.getExprPrime() != null)
        {
            node.getExprPrime().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getBopNot() != null)
        {
            node.getBopNot().apply(this);
        }
        outAExprValPrimeExpr(node);
    }

    public void inAExprSpecialExpr(AExprSpecialExpr node)
    {
        defaultIn(node);
    }

    public void outAExprSpecialExpr(AExprSpecialExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprSpecialExpr(AExprSpecialExpr node)
    {
        inAExprSpecialExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSpecialExpr() != null)
        {
            node.getSpecialExpr().apply(this);
        }
        outAExprSpecialExpr(node);
    }

    public void inAExprArrayExpr(AExprArrayExpr node)
    {
        defaultIn(node);
    }

    public void outAExprArrayExpr(AExprArrayExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprArrayExpr(AExprArrayExpr node)
    {
        inAExprArrayExpr(node);
        if(node.getArrayExpr() != null)
        {
            node.getArrayExpr().apply(this);
        }
        outAExprArrayExpr(node);
    }

    public void inAExprPrimeOperatorValPrimeExprPrime(AExprPrimeOperatorValPrimeExprPrime node)
    {
        defaultIn(node);
    }

    public void outAExprPrimeOperatorValPrimeExprPrime(AExprPrimeOperatorValPrimeExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPrimeOperatorValPrimeExprPrime(AExprPrimeOperatorValPrimeExprPrime node)
    {
        inAExprPrimeOperatorValPrimeExprPrime(node);
        if(node.getExprPrime() != null)
        {
            node.getExprPrime().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getBinInfixOp() != null)
        {
            node.getBinInfixOp().apply(this);
        }
        outAExprPrimeOperatorValPrimeExprPrime(node);
    }

    public void inAExprPrime(AExprPrime node)
    {
        defaultIn(node);
    }

    public void outAExprPrime(AExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPrime(AExprPrime node)
    {
        inAExprPrime(node);
        outAExprPrime(node);
    }

    public void inAAddToCsvCsvOp(AAddToCsvCsvOp node)
    {
        defaultIn(node);
    }

    public void outAAddToCsvCsvOp(AAddToCsvCsvOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddToCsvCsvOp(AAddToCsvCsvOp node)
    {
        inAAddToCsvCsvOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getArrayExpr() != null)
        {
            node.getArrayExpr().apply(this);
        }
        if(node.getOrientation() != null)
        {
            node.getOrientation().apply(this);
        }
        if(node.getKwAdd() != null)
        {
            node.getKwAdd().apply(this);
        }
        outAAddToCsvCsvOp(node);
    }

    public void inARemoveFromCsvCsvOp(ARemoveFromCsvCsvOp node)
    {
        defaultIn(node);
    }

    public void outARemoveFromCsvCsvOp(ARemoveFromCsvCsvOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoveFromCsvCsvOp(ARemoveFromCsvCsvOp node)
    {
        inARemoveFromCsvCsvOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getOrientation() != null)
        {
            node.getOrientation().apply(this);
        }
        if(node.getKwRemoveLast() != null)
        {
            node.getKwRemoveLast().apply(this);
        }
        outARemoveFromCsvCsvOp(node);
    }

    public void inARemoveAtFromCsvCsvOp(ARemoveAtFromCsvCsvOp node)
    {
        defaultIn(node);
    }

    public void outARemoveAtFromCsvCsvOp(ARemoveAtFromCsvCsvOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoveAtFromCsvCsvOp(ARemoveAtFromCsvCsvOp node)
    {
        inARemoveAtFromCsvCsvOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getOrientation() != null)
        {
            node.getOrientation().apply(this);
        }
        if(node.getKwRemoveAt() != null)
        {
            node.getKwRemoveAt().apply(this);
        }
        outARemoveAtFromCsvCsvOp(node);
    }

    public void inAInsertFromCsvCsvOp(AInsertFromCsvCsvOp node)
    {
        defaultIn(node);
    }

    public void outAInsertFromCsvCsvOp(AInsertFromCsvCsvOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInsertFromCsvCsvOp(AInsertFromCsvCsvOp node)
    {
        inAInsertFromCsvCsvOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getArrayExpr() != null)
        {
            node.getArrayExpr().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getOrientation() != null)
        {
            node.getOrientation().apply(this);
        }
        if(node.getKwInsert() != null)
        {
            node.getKwInsert().apply(this);
        }
        outAInsertFromCsvCsvOp(node);
    }

    public void inACsvOrientationRowOrientation(ACsvOrientationRowOrientation node)
    {
        defaultIn(node);
    }

    public void outACsvOrientationRowOrientation(ACsvOrientationRowOrientation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvOrientationRowOrientation(ACsvOrientationRowOrientation node)
    {
        inACsvOrientationRowOrientation(node);
        if(node.getKwRow() != null)
        {
            node.getKwRow().apply(this);
        }
        outACsvOrientationRowOrientation(node);
    }

    public void inACsvOrientationColumnOrientation(ACsvOrientationColumnOrientation node)
    {
        defaultIn(node);
    }

    public void outACsvOrientationColumnOrientation(ACsvOrientationColumnOrientation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsvOrientationColumnOrientation(ACsvOrientationColumnOrientation node)
    {
        inACsvOrientationColumnOrientation(node);
        if(node.getKwColumn() != null)
        {
            node.getKwColumn().apply(this);
        }
        outACsvOrientationColumnOrientation(node);
    }

    public void inAIndexingIndexing(AIndexingIndexing node)
    {
        defaultIn(node);
    }

    public void outAIndexingIndexing(AIndexingIndexing node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexingIndexing(AIndexingIndexing node)
    {
        inAIndexingIndexing(node);
        if(node.getIndexing() != null)
        {
            node.getIndexing().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAIndexingIndexing(node);
    }

    public void inAIndexing(AIndexing node)
    {
        defaultIn(node);
    }

    public void outAIndexing(AIndexing node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexing(AIndexing node)
    {
        inAIndexing(node);
        outAIndexing(node);
    }

    public void inAArrayExprValPrimeArrayExpr(AArrayExprValPrimeArrayExpr node)
    {
        defaultIn(node);
    }

    public void outAArrayExprValPrimeArrayExpr(AArrayExprValPrimeArrayExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExprValPrimeArrayExpr(AArrayExprValPrimeArrayExpr node)
    {
        inAArrayExprValPrimeArrayExpr(node);
        if(node.getArrayExprPrime() != null)
        {
            node.getArrayExprPrime().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAArrayExprValPrimeArrayExpr(node);
    }

    public void inAArrayExprPrimeExtraArrayExprPrime(AArrayExprPrimeExtraArrayExprPrime node)
    {
        defaultIn(node);
    }

    public void outAArrayExprPrimeExtraArrayExprPrime(AArrayExprPrimeExtraArrayExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExprPrimeExtraArrayExprPrime(AArrayExprPrimeExtraArrayExprPrime node)
    {
        inAArrayExprPrimeExtraArrayExprPrime(node);
        if(node.getArrayExprPrime() != null)
        {
            node.getArrayExprPrime().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopComma() != null)
        {
            node.getSopComma().apply(this);
        }
        outAArrayExprPrimeExtraArrayExprPrime(node);
    }

    public void inAArrayExprPrime(AArrayExprPrime node)
    {
        defaultIn(node);
    }

    public void outAArrayExprPrime(AArrayExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExprPrime(AArrayExprPrime node)
    {
        inAArrayExprPrime(node);
        outAArrayExprPrime(node);
    }

    public void inAAddToArrayArrayOp(AAddToArrayArrayOp node)
    {
        defaultIn(node);
    }

    public void outAAddToArrayArrayOp(AAddToArrayArrayOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddToArrayArrayOp(AAddToArrayArrayOp node)
    {
        inAAddToArrayArrayOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwTo() != null)
        {
            node.getKwTo().apply(this);
        }
        if(node.getArrayExpr() != null)
        {
            node.getArrayExpr().apply(this);
        }
        if(node.getKwAdd() != null)
        {
            node.getKwAdd().apply(this);
        }
        outAAddToArrayArrayOp(node);
    }

    public void inARemoveFromArrayArrayOp(ARemoveFromArrayArrayOp node)
    {
        defaultIn(node);
    }

    public void outARemoveFromArrayArrayOp(ARemoveFromArrayArrayOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoveFromArrayArrayOp(ARemoveFromArrayArrayOp node)
    {
        inARemoveFromArrayArrayOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getKwRemoveLast() != null)
        {
            node.getKwRemoveLast().apply(this);
        }
        outARemoveFromArrayArrayOp(node);
    }

    public void inARemoveAtFromArrayArrayOp(ARemoveAtFromArrayArrayOp node)
    {
        defaultIn(node);
    }

    public void outARemoveAtFromArrayArrayOp(ARemoveAtFromArrayArrayOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoveAtFromArrayArrayOp(ARemoveAtFromArrayArrayOp node)
    {
        inARemoveAtFromArrayArrayOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getIndexing() != null)
        {
            node.getIndexing().apply(this);
        }
        if(node.getKwRemoveAt() != null)
        {
            node.getKwRemoveAt().apply(this);
        }
        outARemoveAtFromArrayArrayOp(node);
    }

    public void inAInsertToArrayArrayOp(AInsertToArrayArrayOp node)
    {
        defaultIn(node);
    }

    public void outAInsertToArrayArrayOp(AInsertToArrayArrayOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInsertToArrayArrayOp(AInsertToArrayArrayOp node)
    {
        inAInsertToArrayArrayOp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwIn() != null)
        {
            node.getKwIn().apply(this);
        }
        if(node.getArrayExpr() != null)
        {
            node.getArrayExpr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwInsert() != null)
        {
            node.getKwInsert().apply(this);
        }
        outAInsertToArrayArrayOp(node);
    }

    public void inAValIdVal(AValIdVal node)
    {
        defaultIn(node);
    }

    public void outAValIdVal(AValIdVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValIdVal(AValIdVal node)
    {
        inAValIdVal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAValIdVal(node);
    }

    public void inAValFunctionCallVal(AValFunctionCallVal node)
    {
        defaultIn(node);
    }

    public void outAValFunctionCallVal(AValFunctionCallVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValFunctionCallVal(AValFunctionCallVal node)
    {
        inAValFunctionCallVal(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAValFunctionCallVal(node);
    }

    public void inAValFloatnumVal(AValFloatnumVal node)
    {
        defaultIn(node);
    }

    public void outAValFloatnumVal(AValFloatnumVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValFloatnumVal(AValFloatnumVal node)
    {
        inAValFloatnumVal(node);
        if(node.getFloatnum() != null)
        {
            node.getFloatnum().apply(this);
        }
        outAValFloatnumVal(node);
    }

    public void inAValIntnumVal(AValIntnumVal node)
    {
        defaultIn(node);
    }

    public void outAValIntnumVal(AValIntnumVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValIntnumVal(AValIntnumVal node)
    {
        inAValIntnumVal(node);
        if(node.getIntnum() != null)
        {
            node.getIntnum().apply(this);
        }
        outAValIntnumVal(node);
    }

    public void inAValStringVal(AValStringVal node)
    {
        defaultIn(node);
    }

    public void outAValStringVal(AValStringVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValStringVal(AValStringVal node)
    {
        inAValStringVal(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAValStringVal(node);
    }

    public void inAValBoolVal(AValBoolVal node)
    {
        defaultIn(node);
    }

    public void outAValBoolVal(AValBoolVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValBoolVal(AValBoolVal node)
    {
        inAValBoolVal(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outAValBoolVal(node);
    }

    public void inAPlusInfixBinInfixOp(APlusInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAPlusInfixBinInfixOp(APlusInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusInfixBinInfixOp(APlusInfixBinInfixOp node)
    {
        inAPlusInfixBinInfixOp(node);
        if(node.getOpPlus() != null)
        {
            node.getOpPlus().apply(this);
        }
        outAPlusInfixBinInfixOp(node);
    }

    public void inAMinusInfixBinInfixOp(AMinusInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAMinusInfixBinInfixOp(AMinusInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusInfixBinInfixOp(AMinusInfixBinInfixOp node)
    {
        inAMinusInfixBinInfixOp(node);
        if(node.getOpMinus() != null)
        {
            node.getOpMinus().apply(this);
        }
        outAMinusInfixBinInfixOp(node);
    }

    public void inAMultiplicationInfixBinInfixOp(AMultiplicationInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationInfixBinInfixOp(AMultiplicationInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationInfixBinInfixOp(AMultiplicationInfixBinInfixOp node)
    {
        inAMultiplicationInfixBinInfixOp(node);
        if(node.getOpMult() != null)
        {
            node.getOpMult().apply(this);
        }
        outAMultiplicationInfixBinInfixOp(node);
    }

    public void inADivisionInfixBinInfixOp(ADivisionInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outADivisionInfixBinInfixOp(ADivisionInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionInfixBinInfixOp(ADivisionInfixBinInfixOp node)
    {
        inADivisionInfixBinInfixOp(node);
        if(node.getOpDiv() != null)
        {
            node.getOpDiv().apply(this);
        }
        outADivisionInfixBinInfixOp(node);
    }

    public void inAModuloInfixBinInfixOp(AModuloInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAModuloInfixBinInfixOp(AModuloInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloInfixBinInfixOp(AModuloInfixBinInfixOp node)
    {
        inAModuloInfixBinInfixOp(node);
        if(node.getOpMod() != null)
        {
            node.getOpMod().apply(this);
        }
        outAModuloInfixBinInfixOp(node);
    }

    public void inAAndInfixBinInfixOp(AAndInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAAndInfixBinInfixOp(AAndInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndInfixBinInfixOp(AAndInfixBinInfixOp node)
    {
        inAAndInfixBinInfixOp(node);
        if(node.getBopAnd() != null)
        {
            node.getBopAnd().apply(this);
        }
        outAAndInfixBinInfixOp(node);
    }

    public void inAOrInfixBinInfixOp(AOrInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAOrInfixBinInfixOp(AOrInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrInfixBinInfixOp(AOrInfixBinInfixOp node)
    {
        inAOrInfixBinInfixOp(node);
        if(node.getBopOr() != null)
        {
            node.getBopOr().apply(this);
        }
        outAOrInfixBinInfixOp(node);
    }

    public void inAEqualityInfixBinInfixOp(AEqualityInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAEqualityInfixBinInfixOp(AEqualityInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualityInfixBinInfixOp(AEqualityInfixBinInfixOp node)
    {
        inAEqualityInfixBinInfixOp(node);
        if(node.getBopEq() != null)
        {
            node.getBopEq().apply(this);
        }
        outAEqualityInfixBinInfixOp(node);
    }

    public void inAGreaterThanInfixBinInfixOp(AGreaterThanInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanInfixBinInfixOp(AGreaterThanInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanInfixBinInfixOp(AGreaterThanInfixBinInfixOp node)
    {
        inAGreaterThanInfixBinInfixOp(node);
        if(node.getBopGthan() != null)
        {
            node.getBopGthan().apply(this);
        }
        outAGreaterThanInfixBinInfixOp(node);
    }

    public void inAGreaterThanEqualInfixBinInfixOp(AGreaterThanEqualInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanEqualInfixBinInfixOp(AGreaterThanEqualInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanEqualInfixBinInfixOp(AGreaterThanEqualInfixBinInfixOp node)
    {
        inAGreaterThanEqualInfixBinInfixOp(node);
        if(node.getBopGethan() != null)
        {
            node.getBopGethan().apply(this);
        }
        outAGreaterThanEqualInfixBinInfixOp(node);
    }

    public void inALessThanInfixBinInfixOp(ALessThanInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outALessThanInfixBinInfixOp(ALessThanInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanInfixBinInfixOp(ALessThanInfixBinInfixOp node)
    {
        inALessThanInfixBinInfixOp(node);
        if(node.getBopLthan() != null)
        {
            node.getBopLthan().apply(this);
        }
        outALessThanInfixBinInfixOp(node);
    }

    public void inALessThanEqualInfixBinInfixOp(ALessThanEqualInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outALessThanEqualInfixBinInfixOp(ALessThanEqualInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanEqualInfixBinInfixOp(ALessThanEqualInfixBinInfixOp node)
    {
        inALessThanEqualInfixBinInfixOp(node);
        if(node.getBopLethan() != null)
        {
            node.getBopLethan().apply(this);
        }
        outALessThanEqualInfixBinInfixOp(node);
    }

    public void inANotEqualInfixBinInfixOp(ANotEqualInfixBinInfixOp node)
    {
        defaultIn(node);
    }

    public void outANotEqualInfixBinInfixOp(ANotEqualInfixBinInfixOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualInfixBinInfixOp(ANotEqualInfixBinInfixOp node)
    {
        inANotEqualInfixBinInfixOp(node);
        if(node.getBopNeq() != null)
        {
            node.getBopNeq().apply(this);
        }
        outANotEqualInfixBinInfixOp(node);
    }

    public void inASpeicalExpressionSpecialExpr(ASpeicalExpressionSpecialExpr node)
    {
        defaultIn(node);
    }

    public void outASpeicalExpressionSpecialExpr(ASpeicalExpressionSpecialExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpeicalExpressionSpecialExpr(ASpeicalExpressionSpecialExpr node)
    {
        inASpeicalExpressionSpecialExpr(node);
        if(node.getSpecialExprPrime() != null)
        {
            node.getSpecialExprPrime().apply(this);
        }
        if(node.getSpecialSyntax() != null)
        {
            node.getSpecialSyntax().apply(this);
        }
        outASpeicalExpressionSpecialExpr(node);
    }

    public void inASpecialExprPrimeSpecialExprPrime(ASpecialExprPrimeSpecialExprPrime node)
    {
        defaultIn(node);
    }

    public void outASpecialExprPrimeSpecialExprPrime(ASpecialExprPrimeSpecialExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecialExprPrimeSpecialExprPrime(ASpecialExprPrimeSpecialExprPrime node)
    {
        inASpecialExprPrimeSpecialExprPrime(node);
        if(node.getSpecialExprPrime() != null)
        {
            node.getSpecialExprPrime().apply(this);
        }
        if(node.getSpecialSyntax() != null)
        {
            node.getSpecialSyntax().apply(this);
        }
        outASpecialExprPrimeSpecialExprPrime(node);
    }

    public void inASpecialExprPrime(ASpecialExprPrime node)
    {
        defaultIn(node);
    }

    public void outASpecialExprPrime(ASpecialExprPrime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecialExprPrime(ASpecialExprPrime node)
    {
        inASpecialExprPrime(node);
        outASpecialExprPrime(node);
    }

    public void inASumSpecialSyntax(ASumSpecialSyntax node)
    {
        defaultIn(node);
    }

    public void outASumSpecialSyntax(ASumSpecialSyntax node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumSpecialSyntax(ASumSpecialSyntax node)
    {
        inASumSpecialSyntax(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopSum() != null)
        {
            node.getSopSum().apply(this);
        }
        outASumSpecialSyntax(node);
    }

    public void inAFilterSpecialSyntax(AFilterSpecialSyntax node)
    {
        defaultIn(node);
    }

    public void outAFilterSpecialSyntax(AFilterSpecialSyntax node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilterSpecialSyntax(AFilterSpecialSyntax node)
    {
        inAFilterSpecialSyntax(node);
        if(node.getFilterexpr() != null)
        {
            node.getFilterexpr().apply(this);
        }
        if(node.getDcl() != null)
        {
            node.getDcl().apply(this);
        }
        if(node.getSopComma() != null)
        {
            node.getSopComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopFilter() != null)
        {
            node.getSopFilter().apply(this);
        }
        outAFilterSpecialSyntax(node);
    }

    public void inAMeanSpecialSyntax(AMeanSpecialSyntax node)
    {
        defaultIn(node);
    }

    public void outAMeanSpecialSyntax(AMeanSpecialSyntax node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeanSpecialSyntax(AMeanSpecialSyntax node)
    {
        inAMeanSpecialSyntax(node);
        if(node.getSopMean() != null)
        {
            node.getSopMean().apply(this);
        }
        outAMeanSpecialSyntax(node);
    }

    public void inACountSpecialSyntax(ACountSpecialSyntax node)
    {
        defaultIn(node);
    }

    public void outACountSpecialSyntax(ACountSpecialSyntax node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACountSpecialSyntax(ACountSpecialSyntax node)
    {
        inACountSpecialSyntax(node);
        if(node.getSopCount() != null)
        {
            node.getSopCount().apply(this);
        }
        outACountSpecialSyntax(node);
    }

    public void inASortAscSpecialSyntax(ASortAscSpecialSyntax node)
    {
        defaultIn(node);
    }

    public void outASortAscSpecialSyntax(ASortAscSpecialSyntax node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASortAscSpecialSyntax(ASortAscSpecialSyntax node)
    {
        inASortAscSpecialSyntax(node);
        if(node.getKwSortOrderAsc() != null)
        {
            node.getKwSortOrderAsc().apply(this);
        }
        if(node.getSopComma() != null)
        {
            node.getSopComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopSort() != null)
        {
            node.getSopSort().apply(this);
        }
        outASortAscSpecialSyntax(node);
    }

    public void inASortDescSpecialSyntax(ASortDescSpecialSyntax node)
    {
        defaultIn(node);
    }

    public void outASortDescSpecialSyntax(ASortDescSpecialSyntax node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASortDescSpecialSyntax(ASortDescSpecialSyntax node)
    {
        inASortDescSpecialSyntax(node);
        if(node.getKwSortOrderDsc() != null)
        {
            node.getKwSortOrderDsc().apply(this);
        }
        if(node.getSopComma() != null)
        {
            node.getSopComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopSort() != null)
        {
            node.getSopSort().apply(this);
        }
        outASortDescSpecialSyntax(node);
    }

    public void inASortSpecialSyntax(ASortSpecialSyntax node)
    {
        defaultIn(node);
    }

    public void outASortSpecialSyntax(ASortSpecialSyntax node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASortSpecialSyntax(ASortSpecialSyntax node)
    {
        inASortSpecialSyntax(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopSort() != null)
        {
            node.getSopSort().apply(this);
        }
        outASortSpecialSyntax(node);
    }

    public void inAFilterexprFilterexpr(AFilterexprFilterexpr node)
    {
        defaultIn(node);
    }

    public void outAFilterexprFilterexpr(AFilterexprFilterexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilterexprFilterexpr(AFilterexprFilterexpr node)
    {
        inAFilterexprFilterexpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSopComma() != null)
        {
            node.getSopComma().apply(this);
        }
        outAFilterexprFilterexpr(node);
    }
}
