/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AIndexingIndexing extends PIndexing
{
    private TLCbrack _lCbrack_;
    private PExpr _expr_;
    private TRCbrack _rCbrack_;
    private PIndexing _indexing_;

    public AIndexingIndexing()
    {
        // Constructor
    }

    public AIndexingIndexing(
        @SuppressWarnings("hiding") TLCbrack _lCbrack_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRCbrack _rCbrack_,
        @SuppressWarnings("hiding") PIndexing _indexing_)
    {
        // Constructor
        setLCbrack(_lCbrack_);

        setExpr(_expr_);

        setRCbrack(_rCbrack_);

        setIndexing(_indexing_);

    }

    @Override
    public Object clone()
    {
        return new AIndexingIndexing(
            cloneNode(this._lCbrack_),
            cloneNode(this._expr_),
            cloneNode(this._rCbrack_),
            cloneNode(this._indexing_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndexingIndexing(this);
    }

    public TLCbrack getLCbrack()
    {
        return this._lCbrack_;
    }

    public void setLCbrack(TLCbrack node)
    {
        if(this._lCbrack_ != null)
        {
            this._lCbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lCbrack_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRCbrack getRCbrack()
    {
        return this._rCbrack_;
    }

    public void setRCbrack(TRCbrack node)
    {
        if(this._rCbrack_ != null)
        {
            this._rCbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rCbrack_ = node;
    }

    public PIndexing getIndexing()
    {
        return this._indexing_;
    }

    public void setIndexing(PIndexing node)
    {
        if(this._indexing_ != null)
        {
            this._indexing_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._indexing_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lCbrack_)
            + toString(this._expr_)
            + toString(this._rCbrack_)
            + toString(this._indexing_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lCbrack_ == child)
        {
            this._lCbrack_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rCbrack_ == child)
        {
            this._rCbrack_ = null;
            return;
        }

        if(this._indexing_ == child)
        {
            this._indexing_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lCbrack_ == oldChild)
        {
            setLCbrack((TLCbrack) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rCbrack_ == oldChild)
        {
            setRCbrack((TRCbrack) newChild);
            return;
        }

        if(this._indexing_ == oldChild)
        {
            setIndexing((PIndexing) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
