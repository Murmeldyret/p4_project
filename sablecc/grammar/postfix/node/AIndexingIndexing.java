/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AIndexingIndexing extends PIndexing
{
    private TLBrack _lBrack_;
    private PExpr _expr_;
    private TRBrack _rBrack_;
    private PIndexing _indexing_;

    public AIndexingIndexing()
    {
        // Constructor
    }

    public AIndexingIndexing(
        @SuppressWarnings("hiding") TLBrack _lBrack_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRBrack _rBrack_,
        @SuppressWarnings("hiding") PIndexing _indexing_)
    {
        // Constructor
        setLBrack(_lBrack_);

        setExpr(_expr_);

        setRBrack(_rBrack_);

        setIndexing(_indexing_);

    }

    @Override
    public Object clone()
    {
        return new AIndexingIndexing(
            cloneNode(this._lBrack_),
            cloneNode(this._expr_),
            cloneNode(this._rBrack_),
            cloneNode(this._indexing_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndexingIndexing(this);
    }

    public TLBrack getLBrack()
    {
        return this._lBrack_;
    }

    public void setLBrack(TLBrack node)
    {
        if(this._lBrack_ != null)
        {
            this._lBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrack_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRBrack getRBrack()
    {
        return this._rBrack_;
    }

    public void setRBrack(TRBrack node)
    {
        if(this._rBrack_ != null)
        {
            this._rBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrack_ = node;
    }

    public PIndexing getIndexing()
    {
        return this._indexing_;
    }

    public void setIndexing(PIndexing node)
    {
        if(this._indexing_ != null)
        {
            this._indexing_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._indexing_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBrack_)
            + toString(this._expr_)
            + toString(this._rBrack_)
            + toString(this._indexing_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBrack_ == child)
        {
            this._lBrack_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rBrack_ == child)
        {
            this._rBrack_ = null;
            return;
        }

        if(this._indexing_ == child)
        {
            this._indexing_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBrack_ == oldChild)
        {
            setLBrack((TLBrack) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rBrack_ == oldChild)
        {
            setRBrack((TRBrack) newChild);
            return;
        }

        if(this._indexing_ == oldChild)
        {
            setIndexing((PIndexing) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
