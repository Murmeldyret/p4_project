/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AFilterSpecialSyntax extends PSpecialSyntax
{
    private TSopFilter _sopFilter_;
    private PExpr _expr_;
    private TSopComma _sopComma_;
    private PDcl _dcl_;
    private PFilterexpr _filterexpr_;

    public AFilterSpecialSyntax()
    {
        // Constructor
    }

    public AFilterSpecialSyntax(
        @SuppressWarnings("hiding") TSopFilter _sopFilter_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TSopComma _sopComma_,
        @SuppressWarnings("hiding") PDcl _dcl_,
        @SuppressWarnings("hiding") PFilterexpr _filterexpr_)
    {
        // Constructor
        setSopFilter(_sopFilter_);

        setExpr(_expr_);

        setSopComma(_sopComma_);

        setDcl(_dcl_);

        setFilterexpr(_filterexpr_);

    }

    @Override
    public Object clone()
    {
        return new AFilterSpecialSyntax(
            cloneNode(this._sopFilter_),
            cloneNode(this._expr_),
            cloneNode(this._sopComma_),
            cloneNode(this._dcl_),
            cloneNode(this._filterexpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFilterSpecialSyntax(this);
    }

    public TSopFilter getSopFilter()
    {
        return this._sopFilter_;
    }

    public void setSopFilter(TSopFilter node)
    {
        if(this._sopFilter_ != null)
        {
            this._sopFilter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sopFilter_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TSopComma getSopComma()
    {
        return this._sopComma_;
    }

    public void setSopComma(TSopComma node)
    {
        if(this._sopComma_ != null)
        {
            this._sopComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sopComma_ = node;
    }

    public PDcl getDcl()
    {
        return this._dcl_;
    }

    public void setDcl(PDcl node)
    {
        if(this._dcl_ != null)
        {
            this._dcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dcl_ = node;
    }

    public PFilterexpr getFilterexpr()
    {
        return this._filterexpr_;
    }

    public void setFilterexpr(PFilterexpr node)
    {
        if(this._filterexpr_ != null)
        {
            this._filterexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._filterexpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sopFilter_)
            + toString(this._expr_)
            + toString(this._sopComma_)
            + toString(this._dcl_)
            + toString(this._filterexpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sopFilter_ == child)
        {
            this._sopFilter_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._sopComma_ == child)
        {
            this._sopComma_ = null;
            return;
        }

        if(this._dcl_ == child)
        {
            this._dcl_ = null;
            return;
        }

        if(this._filterexpr_ == child)
        {
            this._filterexpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sopFilter_ == oldChild)
        {
            setSopFilter((TSopFilter) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._sopComma_ == oldChild)
        {
            setSopComma((TSopComma) newChild);
            return;
        }

        if(this._dcl_ == oldChild)
        {
            setDcl((PDcl) newChild);
            return;
        }

        if(this._filterexpr_ == oldChild)
        {
            setFilterexpr((PFilterexpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
