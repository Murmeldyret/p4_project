/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ASortSpecialSyntax extends PSpecialSyntax
{
    private TSopSort _sopSort_;
    private TId _id_;

    public ASortSpecialSyntax()
    {
        // Constructor
    }

    public ASortSpecialSyntax(
        @SuppressWarnings("hiding") TSopSort _sopSort_,
        @SuppressWarnings("hiding") TId _id_)
    {
        // Constructor
        setSopSort(_sopSort_);

        setId(_id_);

    }

    @Override
    public Object clone()
    {
        return new ASortSpecialSyntax(
            cloneNode(this._sopSort_),
            cloneNode(this._id_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASortSpecialSyntax(this);
    }

    public TSopSort getSopSort()
    {
        return this._sopSort_;
    }

    public void setSopSort(TSopSort node)
    {
        if(this._sopSort_ != null)
        {
            this._sopSort_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sopSort_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sopSort_)
            + toString(this._id_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sopSort_ == child)
        {
            this._sopSort_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sopSort_ == oldChild)
        {
            setSopSort((TSopSort) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
