/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AArrayExprValPrimeArrayExpr extends PArrayExpr
{
    private TLBrack _lBrack_;
    private PVal _val_;
    private PArrayExprPrime _arrayExprPrime_;
    private TRBrack _rBrack_;

    public AArrayExprValPrimeArrayExpr()
    {
        // Constructor
    }

    public AArrayExprValPrimeArrayExpr(
        @SuppressWarnings("hiding") TLBrack _lBrack_,
        @SuppressWarnings("hiding") PVal _val_,
        @SuppressWarnings("hiding") PArrayExprPrime _arrayExprPrime_,
        @SuppressWarnings("hiding") TRBrack _rBrack_)
    {
        // Constructor
        setLBrack(_lBrack_);

        setVal(_val_);

        setArrayExprPrime(_arrayExprPrime_);

        setRBrack(_rBrack_);

    }

    @Override
    public Object clone()
    {
        return new AArrayExprValPrimeArrayExpr(
            cloneNode(this._lBrack_),
            cloneNode(this._val_),
            cloneNode(this._arrayExprPrime_),
            cloneNode(this._rBrack_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayExprValPrimeArrayExpr(this);
    }

    public TLBrack getLBrack()
    {
        return this._lBrack_;
    }

    public void setLBrack(TLBrack node)
    {
        if(this._lBrack_ != null)
        {
            this._lBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrack_ = node;
    }

    public PVal getVal()
    {
        return this._val_;
    }

    public void setVal(PVal node)
    {
        if(this._val_ != null)
        {
            this._val_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._val_ = node;
    }

    public PArrayExprPrime getArrayExprPrime()
    {
        return this._arrayExprPrime_;
    }

    public void setArrayExprPrime(PArrayExprPrime node)
    {
        if(this._arrayExprPrime_ != null)
        {
            this._arrayExprPrime_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayExprPrime_ = node;
    }

    public TRBrack getRBrack()
    {
        return this._rBrack_;
    }

    public void setRBrack(TRBrack node)
    {
        if(this._rBrack_ != null)
        {
            this._rBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrack_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBrack_)
            + toString(this._val_)
            + toString(this._arrayExprPrime_)
            + toString(this._rBrack_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBrack_ == child)
        {
            this._lBrack_ = null;
            return;
        }

        if(this._val_ == child)
        {
            this._val_ = null;
            return;
        }

        if(this._arrayExprPrime_ == child)
        {
            this._arrayExprPrime_ = null;
            return;
        }

        if(this._rBrack_ == child)
        {
            this._rBrack_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBrack_ == oldChild)
        {
            setLBrack((TLBrack) newChild);
            return;
        }

        if(this._val_ == oldChild)
        {
            setVal((PVal) newChild);
            return;
        }

        if(this._arrayExprPrime_ == oldChild)
        {
            setArrayExprPrime((PArrayExprPrime) newChild);
            return;
        }

        if(this._rBrack_ == oldChild)
        {
            setRBrack((TRBrack) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
