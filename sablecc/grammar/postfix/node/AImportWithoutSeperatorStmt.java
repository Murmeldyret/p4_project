/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AImportWithoutSeperatorStmt extends PStmt
{
    private TKwImport _kwImport_;
    private PExpr _expr_;
    private TKwAs _kwAs_;
    private TId _id_;

    public AImportWithoutSeperatorStmt()
    {
        // Constructor
    }

    public AImportWithoutSeperatorStmt(
        @SuppressWarnings("hiding") TKwImport _kwImport_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TKwAs _kwAs_,
        @SuppressWarnings("hiding") TId _id_)
    {
        // Constructor
        setKwImport(_kwImport_);

        setExpr(_expr_);

        setKwAs(_kwAs_);

        setId(_id_);

    }

    @Override
    public Object clone()
    {
        return new AImportWithoutSeperatorStmt(
            cloneNode(this._kwImport_),
            cloneNode(this._expr_),
            cloneNode(this._kwAs_),
            cloneNode(this._id_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImportWithoutSeperatorStmt(this);
    }

    public TKwImport getKwImport()
    {
        return this._kwImport_;
    }

    public void setKwImport(TKwImport node)
    {
        if(this._kwImport_ != null)
        {
            this._kwImport_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwImport_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TKwAs getKwAs()
    {
        return this._kwAs_;
    }

    public void setKwAs(TKwAs node)
    {
        if(this._kwAs_ != null)
        {
            this._kwAs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwAs_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwImport_)
            + toString(this._expr_)
            + toString(this._kwAs_)
            + toString(this._id_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwImport_ == child)
        {
            this._kwImport_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._kwAs_ == child)
        {
            this._kwAs_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwImport_ == oldChild)
        {
            setKwImport((TKwImport) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._kwAs_ == oldChild)
        {
            setKwAs((TKwAs) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
