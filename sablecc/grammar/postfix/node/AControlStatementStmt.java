/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AControlStatementStmt extends PStmt
{
    private TIf _if_;
    private PExpr _expr_;
    private PBlock _block_;
    private PInControlStmt _inControlStmt_;

    public AControlStatementStmt()
    {
        // Constructor
    }

    public AControlStatementStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PBlock _block_,
        @SuppressWarnings("hiding") PInControlStmt _inControlStmt_)
    {
        // Constructor
        setIf(_if_);

        setExpr(_expr_);

        setBlock(_block_);

        setInControlStmt(_inControlStmt_);

    }

    @Override
    public Object clone()
    {
        return new AControlStatementStmt(
            cloneNode(this._if_),
            cloneNode(this._expr_),
            cloneNode(this._block_),
            cloneNode(this._inControlStmt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAControlStatementStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    public PInControlStmt getInControlStmt()
    {
        return this._inControlStmt_;
    }

    public void setInControlStmt(PInControlStmt node)
    {
        if(this._inControlStmt_ != null)
        {
            this._inControlStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inControlStmt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._expr_)
            + toString(this._block_)
            + toString(this._inControlStmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        if(this._inControlStmt_ == child)
        {
            this._inControlStmt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        if(this._inControlStmt_ == oldChild)
        {
            setInControlStmt((PInControlStmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
